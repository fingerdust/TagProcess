
package tagprocess;
import com.itextpdf.text.*;

import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.Document;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font.FontFamily;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.ColumnText;
import com.itextpdf.text.pdf.GrayColor;
import com.itextpdf.text.pdf.PdfContentByte;
import com.itextpdf.text.pdf.PdfGState;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfPageEventHelper;
import com.itextpdf.text.pdf.PdfTemplate;
import com.itextpdf.text.pdf.PdfWriter;

import java.awt.Color;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.util.*;
import javax.swing.table.DefaultTableModel;
import java.io.*;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.concurrent.TimeUnit;
import javax.swing.JPanel;
import javax.swing.JSpinner;
import javax.swing.JTextField;
import javax.swing.SpinnerDateModel;


 
/**
 * A class containing the UI handler, main method and main application logic 
 * <p>This class extends JFrame and contains all UI handler methods for the application. 
 * <p>This class contains the main method of the program 
 * <p>The iText pdf reports are generated by methods in this class. There is a method used to 
 * create the client report, another to create the exported department list and another to 
 * create the productivity report. 
 * <p>This class makes use of class level variables, in particlar, an instance of the Sequence class, 
 * whereby there is one sequence object that all operations work on. 
 * <p>The UI and class methods will allow a user to 1. Create, save, open, edit and export
 * department lists. 2. Edit the VAT rates across all department lists. 3. Create a new stocktake 
 * with an assigned department list. 4. Add and verify Tag objects to the Sequence object. 5. View and 
 * edit the sequence 6. Create productivity and client reports. 
 * @author Mark Tobin mtspark@gmail.com
 */
public class MainPage extends javax.swing.JFrame {

    /**
     * Creates new form MainPage
     */
    public MainPage() {
        
        initComponents();
        this.getRootPane().setDefaultButton(addOk);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        Input = new javax.swing.JFrame();
        jPanel5 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        tagNo = new javax.swing.JTextField();
        locationIn = new javax.swing.JTextField();
        deptIn = new javax.swing.JTextField();
        valueIn = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();
        adjIn = new javax.swing.JTextField();
        adjVIn = new javax.swing.JTextField();
        clerkIn = new javax.swing.JTextField();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        clerkLabel = new javax.swing.JLabel();
        srCheckBox = new javax.swing.JCheckBox();
        jLabel4 = new javax.swing.JLabel();
        deptDisp = new javax.swing.JLabel();
        FullInput = new javax.swing.JFrame();
        showPrevTag = new javax.swing.JPanel();
        jLabel20 = new javax.swing.JLabel();
        p2TagNo = new javax.swing.JTextField();
        jLabel21 = new javax.swing.JLabel();
        p2Area = new javax.swing.JTextField();
        p2Location = new javax.swing.JTextField();
        jLabel24 = new javax.swing.JLabel();
        jLabel25 = new javax.swing.JLabel();
        p2Dept = new javax.swing.JTextField();
        jLabel26 = new javax.swing.JLabel();
        p2Total = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel40 = new javax.swing.JLabel();
        showPrev = new javax.swing.JLabel();
        CheckTag = new javax.swing.JFrame();
        jPanel7 = new javax.swing.JPanel();
        jLabel16 = new javax.swing.JLabel();
        checkTNo = new javax.swing.JTextField();
        jLabel17 = new javax.swing.JLabel();
        checkDept = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        jLabel27 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        checkVat = new javax.swing.JLabel();
        checkMargin = new javax.swing.JLabel();
        checkArticle = new javax.swing.JLabel();
        checkValue = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        ChangeRates = new javax.swing.JFrame();
        jLabel29 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        rate1 = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        rate2 = new javax.swing.JTextField();
        jLabel31 = new javax.swing.JLabel();
        rate3 = new javax.swing.JTextField();
        ControlPanel = new javax.swing.JFrame();
        jPanel8 = new javax.swing.JPanel();
        jLabel32 = new javax.swing.JLabel();
        jLabel33 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        first = new javax.swing.JTextField();
        last = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jLabel35 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        d = new javax.swing.JLabel();
        jLabel37d = new javax.swing.JLabel();
        vfirst = new javax.swing.JTextField();
        vlast = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        seqWatch = new javax.swing.JTextArea();
        jLabel12 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        saveFile = new javax.swing.JButton();
        proRep = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();
        FileChooser = new javax.swing.JFileChooser();
        ViewTags = new javax.swing.JFrame();
        jScrollPane3 = new javax.swing.JScrollPane();
        tagsTable = new javax.swing.JTable();
        jButton10 = new javax.swing.JButton();
        tagFix = new javax.swing.JFrame();
        jPanel12 = new javax.swing.JPanel();
        fixNo = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel38 = new javax.swing.JLabel();
        jLabel39 = new javax.swing.JLabel();
        fixLocation = new javax.swing.JTextField();
        fixDept = new javax.swing.JTextField();
        fixValue = new javax.swing.JTextField();
        fixSave = new javax.swing.JButton();
        fixSR = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        setupPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        newListLabel = new javax.swing.JLabel();
        newListName = new javax.swing.JTextField();
        saveList = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        fromTemplateCombo = new javax.swing.JComboBox(getDeptNames());
        fromTemplate = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        existingListCombo = new javax.swing.JComboBox(getDeptNames());
        existingListButton = new javax.swing.JButton();
        editingPanel = new javax.swing.JPanel();
        addNo = new javax.swing.JTextField();
        addDept = new javax.swing.JTextField();
        addVat = new javax.swing.JTextField();
        addMargin = new javax.swing.JTextField();
        addGroup = new javax.swing.JTextField();
        addOk = new javax.swing.JButton();
        newDept = new javax.swing.JButton();
        edit = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        storeLocation = new javax.swing.JTextField();
        location = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        export = new javax.swing.JButton();
        controlPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        productivity = new javax.swing.JCheckBox();
        jLabel8 = new javax.swing.JLabel();
        dateOfTags = new javax.swing.JLabel();
        stDate = new com.toedter.calendar.JDateChooser();
        costComp = new javax.swing.JCheckBox();
        jLabel10 = new javax.swing.JLabel();
        jLabel36 = new javax.swing.JLabel();
        jLabel37 = new javax.swing.JLabel();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        date = new javax.swing.JFormattedTextField();
        date.setValue(new Date());
        idLabel = new javax.swing.JLabel();
        locLabel = new javax.swing.JLabel();
        openFile = new javax.swing.JButton();
        fileLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();

        Input.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        Input.setTitle("Tag Input - Pass 1");
        Input.setBounds(new java.awt.Rectangle(400, 100, 0, 0));

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Tag Number:");

        tagNo.setEditable(false);
        tagNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        tagNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        locationIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        locationIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        locationIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                locationInActionPerformed(evt);
            }
        });

        deptIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        deptIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        deptIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deptInActionPerformed(evt);
            }
        });
        deptIn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                deptInFocusGained(evt);
            }
        });
        deptIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                deptInKeyTyped(evt);
            }
        });

        valueIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        valueIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        valueIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                valueInActionPerformed(evt);
            }
        });
        valueIn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                valueInFocusGained(evt);
            }
        });
        valueIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                valueInKeyTyped(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel13.setText("Location:");

        jLabel14.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel14.setText("Dept:");

        jLabel15.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel15.setText("Value:");

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton2.setText("Quit");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        adjIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        adjIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        adjIn.setText("0");
        adjIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjInActionPerformed(evt);
            }
        });
        adjIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                adjInKeyTyped(evt);
            }
        });

        adjVIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        adjVIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        adjVIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                adjVInActionPerformed(evt);
            }
        });
        adjVIn.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                adjVInFocusGained(evt);
            }
        });
        adjVIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                adjVInKeyTyped(evt);
            }
        });

        clerkIn.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        clerkIn.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        clerkIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clerkInActionPerformed(evt);
            }
        });
        clerkIn.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                clerkInKeyTyped(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel18.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel18.setText("Adjustment:");

        jLabel19.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel19.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel19.setText("Adjusted Value:");

        clerkLabel.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        clerkLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        clerkLabel.setText("Clerk ID:");

        srCheckBox.setBackground(new java.awt.Color(255, 255, 255));
        srCheckBox.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        srCheckBox.setText("Stock Room");
        srCheckBox.setHorizontalTextPosition(javax.swing.SwingConstants.LEADING);

        jLabel4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel4.setText("Dept:");

        deptDisp.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(0, 359, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel19)
                        .addComponent(jLabel14, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel13, javax.swing.GroupLayout.Alignment.TRAILING))
                    .addComponent(jLabel18, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel15, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(clerkLabel, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clerkIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adjIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(adjVIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(valueIn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(deptIn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(locationIn, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGap(1, 1, 1)
                .addComponent(jLabel9)
                .addGap(4, 4, 4)
                .addComponent(tagNo, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deptDisp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                        .addComponent(srCheckBox)
                        .addGap(81, 81, 81))))
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {adjIn, adjVIn, clerkIn, deptIn, locationIn, valueIn});

        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel11)
                .addGap(14, 14, 14)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tagNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)
                        .addComponent(deptDisp, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addComponent(srCheckBox)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(locationIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel14)
                    .addComponent(deptIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(valueIn, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(adjIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(adjVIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel19))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(clerkIn, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(clerkLabel))
                .addGap(52, 52, 52)
                .addComponent(jButton2)
                .addContainerGap())
        );

        jPanel5Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {adjIn, adjVIn, clerkIn, deptIn, locationIn, valueIn});

        javax.swing.GroupLayout InputLayout = new javax.swing.GroupLayout(Input.getContentPane());
        Input.getContentPane().setLayout(InputLayout);
        InputLayout.setHorizontalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        InputLayout.setVerticalGroup(
            InputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        FullInput.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        FullInput.setTitle("Input (Pass 2)");
        FullInput.setBounds(new java.awt.Rectangle(400, 100, 0, 0));

        showPrevTag.setBackground(new java.awt.Color(255, 255, 255));

        jLabel20.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel20.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel20.setText("Tag No:");

        p2TagNo.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        p2TagNo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        p2TagNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2TagNoActionPerformed(evt);
            }
        });
        p2TagNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                p2TagNoKeyTyped(evt);
            }
        });

        jLabel21.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel21.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel21.setText("Area:");

        p2Area.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        p2Area.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        p2Area.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2AreaActionPerformed(evt);
            }
        });

        p2Location.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        p2Location.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        p2Location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2LocationActionPerformed(evt);
            }
        });

        jLabel24.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel24.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel24.setText("Location:");

        jLabel25.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel25.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel25.setText("Department:");

        p2Dept.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        p2Dept.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        p2Dept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2DeptActionPerformed(evt);
            }
        });
        p2Dept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                p2DeptFocusGained(evt);
            }
        });
        p2Dept.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                p2DeptKeyTyped(evt);
            }
        });

        jLabel26.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel26.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel26.setText("Adjusted Total:");

        p2Total.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        p2Total.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        p2Total.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                p2TotalActionPerformed(evt);
            }
        });
        p2Total.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                p2TotalFocusGained(evt);
            }
        });
        p2Total.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                p2TotalKeyTyped(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel5.setText("Previous Tag Number:");

        jLabel40.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        showPrev.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        javax.swing.GroupLayout showPrevTagLayout = new javax.swing.GroupLayout(showPrevTag);
        showPrevTag.setLayout(showPrevTagLayout);
        showPrevTagLayout.setHorizontalGroup(
            showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showPrevTagLayout.createSequentialGroup()
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(showPrevTagLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel26)
                            .addComponent(jLabel25)
                            .addComponent(jLabel21)
                            .addComponent(jLabel20)
                            .addComponent(jLabel24))
                        .addGap(18, 18, 18)
                        .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(p2Area)
                            .addComponent(p2Location)
                            .addComponent(p2Dept)
                            .addComponent(p2Total)
                            .addComponent(p2TagNo, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(showPrevTagLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel40, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(showPrev, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE))))
                .addContainerGap(116, Short.MAX_VALUE))
        );

        showPrevTagLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {p2Area, p2Dept, p2Location, p2TagNo, p2Total});

        showPrevTagLayout.setVerticalGroup(
            showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(showPrevTagLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel40)
                    .addComponent(showPrev, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(83, 83, 83)
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(p2TagNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(p2Area, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(p2Location, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel24))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(p2Dept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(showPrevTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(p2Total, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(113, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout FullInputLayout = new javax.swing.GroupLayout(FullInput.getContentPane());
        FullInput.getContentPane().setLayout(FullInputLayout);
        FullInputLayout.setHorizontalGroup(
            FullInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showPrevTag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        FullInputLayout.setVerticalGroup(
            FullInputLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(showPrevTag, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        CheckTag.setTitle("Check Tags");

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        jLabel16.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel16.setText("Tag No:");

        checkTNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        checkTNo.setToolTipText("Enter a tag number to view tag details. ");
        checkTNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkTNoActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel17.setText("Department:");

        checkDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel22.setText("VAT Rate:");

        jLabel23.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel23.setText("Margin:");

        jLabel27.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel27.setText("Article Group:");

        jLabel28.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel28.setText("Value:");

        checkVat.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        checkMargin.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        checkArticle.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        checkValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jButton3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton3.setText("Finish");

        jButton4.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton4.setText("Edit...");

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(checkTNo, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel7Layout.createSequentialGroup()
                                .addGap(176, 176, 176)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel22)
                                    .addComponent(jLabel17)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel27)
                                    .addComponent(jLabel28))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(checkDept, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(checkMargin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                        .addComponent(checkVat, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(checkValue, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE)
                                        .addComponent(checkArticle, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                        .addGap(0, 125, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3)))
                .addContainerGap())
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(checkTNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(61, 61, 61)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(checkDept, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(checkVat))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(checkMargin))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(checkArticle))
                .addGap(18, 18, 18)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel28)
                    .addComponent(checkValue))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 85, Short.MAX_VALUE)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4))
                .addContainerGap())
        );

        javax.swing.GroupLayout CheckTagLayout = new javax.swing.GroupLayout(CheckTag.getContentPane());
        CheckTag.getContentPane().setLayout(CheckTagLayout);
        CheckTagLayout.setHorizontalGroup(
            CheckTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        CheckTagLayout.setVerticalGroup(
            CheckTagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLabel29.setText("jLabel29");

        jButton5.setText("Ok");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jLabel30.setText("jLabel30");

        jLabel31.setText("jLabel31");

        javax.swing.GroupLayout ChangeRatesLayout = new javax.swing.GroupLayout(ChangeRates.getContentPane());
        ChangeRates.getContentPane().setLayout(ChangeRatesLayout);
        ChangeRatesLayout.setHorizontalGroup(
            ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangeRatesLayout.createSequentialGroup()
                .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ChangeRatesLayout.createSequentialGroup()
                        .addGap(84, 84, 84)
                        .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel30)
                            .addComponent(jLabel29)
                            .addComponent(jLabel31))
                        .addGap(18, 18, 18)
                        .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rate1)
                            .addComponent(rate2)
                            .addComponent(rate3, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(ChangeRatesLayout.createSequentialGroup()
                        .addGap(111, 111, 111)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(103, Short.MAX_VALUE))
        );

        ChangeRatesLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {rate1, rate2, rate3});

        ChangeRatesLayout.setVerticalGroup(
            ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ChangeRatesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel29)
                    .addComponent(rate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel30)
                    .addComponent(rate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(ChangeRatesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(rate3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton5)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ControlPanel.setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        ControlPanel.setTitle("Control Panel");

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));
        jPanel8.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel32.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel32.setText("Add Tags");

        jLabel33.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel33.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel33.setText("First:");

        jLabel34.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel34.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel34.setText("Last:");

        first.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        first.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        last.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        last.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton6.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton6.setText("Go");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel34)
                            .addComponent(jLabel33)
                            .addComponent(jLabel32))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(last, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(first)))
                    .addGroup(jPanel8Layout.createSequentialGroup()
                        .addGap(107, 107, 107)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(109, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel32)
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel33)
                    .addComponent(first, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel34)
                    .addComponent(last, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));
        jPanel9.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel35.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel35.setText("View Tags");

        jButton7.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jButton7.setText("Go");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        d.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        d.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        d.setText("Last:");

        jLabel37d.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel37d.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel37d.setText("First:");

        vfirst.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vfirst.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        vlast.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        vlast.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel35))
                    .addGroup(jPanel9Layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(d)
                                    .addComponent(jLabel37d))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(vlast)
                                    .addComponent(vfirst, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel9Layout.createSequentialGroup()
                                .addGap(37, 37, 37)
                                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(110, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel35)
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel37d)
                    .addComponent(vfirst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(d)
                    .addComponent(vlast, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(30, Short.MAX_VALUE))
        );

        jPanel10.setBackground(new java.awt.Color(255, 255, 255));
        jPanel10.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        seqWatch.setEditable(false);
        seqWatch.setColumns(10);
        seqWatch.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        seqWatch.setLineWrap(true);
        seqWatch.setRows(5);
        seqWatch.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255), 3));
        jScrollPane2.setViewportView(seqWatch);

        jLabel12.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel12.setText("Tags Entered");

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel12))
                    .addGroup(jPanel10Layout.createSequentialGroup()
                        .addGap(95, 95, 95)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(80, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel12)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11.setBackground(new java.awt.Color(255, 255, 255));
        jPanel11.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jButton8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton8.setText("Create Report");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        saveFile.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        saveFile.setText("Save");
        saveFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveFileActionPerformed(evt);
            }
        });

        proRep.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        proRep.setText("Create Productivity Report");
        proRep.setEnabled(false);
        proRep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                proRepActionPerformed(evt);
            }
        });

        jButton9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton9.setText("Exit");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel11Layout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(saveFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(proRep, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 214, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(56, 56, 56))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(proRep, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveFile, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel11Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jButton8, jButton9, proRep, saveFile});

        jMenu3.setText("File");
        jMenuBar2.add(jMenu3);

        jMenu4.setText("Edit");
        jMenuBar2.add(jMenu4);

        ControlPanel.setJMenuBar(jMenuBar2);

        javax.swing.GroupLayout ControlPanelLayout = new javax.swing.GroupLayout(ControlPanel.getContentPane());
        ControlPanel.getContentPane().setLayout(ControlPanelLayout);
        ControlPanelLayout.setHorizontalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ControlPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jPanel10, jPanel11, jPanel8, jPanel9});

        ControlPanelLayout.setVerticalGroup(
            ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ControlPanelLayout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(ControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel11, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ControlPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jPanel8, jPanel9});

        FileChooser.setCurrentDirectory(new java.io.File("C:\\Tag Process\\Misc\\Saved"));
        FileChooser.setDialogTitle("Open");

        ViewTags.setTitle("View Tags");
        ViewTags.setBackground(new java.awt.Color(255, 255, 255));

        tagsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tag No.", "Area", "Location", "Department", "Value", "Verified"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(tagsTable);
        tagsTable.getColumnModel().getColumn(0).setResizable(false);
        tagsTable.getColumnModel().getColumn(1).setResizable(false);
        tagsTable.getColumnModel().getColumn(2).setResizable(false);
        tagsTable.getColumnModel().getColumn(3).setResizable(false);
        tagsTable.getColumnModel().getColumn(4).setResizable(false);

        jButton10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton10.setText("Edit Selected");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ViewTagsLayout = new javax.swing.GroupLayout(ViewTags.getContentPane());
        ViewTags.getContentPane().setLayout(ViewTagsLayout);
        ViewTagsLayout.setHorizontalGroup(
            ViewTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 444, Short.MAX_VALUE)
            .addGroup(ViewTagsLayout.createSequentialGroup()
                .addGap(136, 136, 136)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        ViewTagsLayout.setVerticalGroup(
            ViewTagsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ViewTagsLayout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 475, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addGap(5, 5, 5))
        );

        tagFix.setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        tagFix.setTitle("Tag Fix");
        tagFix.setBounds(new java.awt.Rectangle(500, 200, 0, 0));

        jPanel12.setBackground(new java.awt.Color(255, 255, 255));

        fixNo.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel6.setText("Location:");

        jLabel38.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel38.setText("Department:");

        jLabel39.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel39.setText("Value:");

        fixLocation.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fixDept.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fixDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixDeptActionPerformed(evt);
            }
        });

        fixValue.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        fixSave.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fixSave.setText("Save");
        fixSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fixSaveActionPerformed(evt);
            }
        });

        fixSR.setBackground(new java.awt.Color(255, 255, 255));
        fixSR.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fixSR.setText("Stock Room");
        fixSR.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        fixSR.setHorizontalTextPosition(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel12Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(fixSave, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel12Layout.createSequentialGroup()
                        .addGap(97, 97, 97)
                        .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel12Layout.createSequentialGroup()
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel38)
                                    .addComponent(jLabel39))
                                .addGap(23, 23, 23)
                                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(fixDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fixValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(fixLocation, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(fixNo, javax.swing.GroupLayout.PREFERRED_SIZE, 157, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 102, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGap(143, 143, 143)
                .addComponent(fixSR)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel12Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {fixDept, fixLocation, fixValue});

        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(fixNo, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(fixSR)
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(fixLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel38)
                    .addComponent(fixDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel39)
                    .addComponent(fixValue, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(55, 55, 55)
                .addComponent(fixSave)
                .addContainerGap())
        );

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setText("Tag Number:");

        javax.swing.GroupLayout tagFixLayout = new javax.swing.GroupLayout(tagFix.getContentPane());
        tagFix.getContentPane().setLayout(tagFixLayout);
        tagFixLayout.setHorizontalGroup(
            tagFixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tagFixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tagFixLayout.createSequentialGroup()
                    .addGap(159, 159, 159)
                    .addComponent(jLabel3)
                    .addContainerGap(160, Short.MAX_VALUE)))
        );
        tagFixLayout.setVerticalGroup(
            tagFixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(tagFixLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(tagFixLayout.createSequentialGroup()
                    .addGap(141, 141, 141)
                    .addComponent(jLabel3)
                    .addContainerGap(142, Short.MAX_VALUE)))
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tag Process");
        setAutoRequestFocus(false);
        setBounds(new java.awt.Rectangle(200, 5, 0, 0));
        setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        setupPanel.setBackground(new java.awt.Color(255, 255, 255));
        setupPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        table.setAutoCreateRowSorter(true);
        table.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No.", "Dept Name", "Vat Rate", "Margin", "Art. Grp. "
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Double.class, java.lang.String.class, java.lang.Float.class, java.lang.Double.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setVisible(false);
        table.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
        table.setEnabled(false);
        table.setRowHeight(22);
        table.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(table);

        newListLabel.setText("New Store Id:");
        newListLabel.setEnabled(false);

        newListName.setEnabled(false);
        newListName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newListNameActionPerformed(evt);
            }
        });

        saveList.setText("Save");
        saveList.setEnabled(false);
        saveList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveListActionPerformed(evt);
            }
        });

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Create/Edit Department List:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 11))); // NOI18N

        jLabel2.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel2.setText("Select Store ID:");

        fromTemplateCombo.setFont(new java.awt.Font("Arial", 0, 12)); // NOI18N
        fromTemplateCombo.setMaximumRowCount(4);

        fromTemplate.setText("Open");
        fromTemplate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fromTemplateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(fromTemplateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(fromTemplate)
                .addGap(25, 25, 25))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(fromTemplateCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(fromTemplate))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Use Existing Department List:", javax.swing.border.TitledBorder.LEFT, javax.swing.border.TitledBorder.TOP, new java.awt.Font("Arial", 0, 11))); // NOI18N

        jLabel1.setFont(new java.awt.Font("Arial", 0, 13)); // NOI18N
        jLabel1.setText("Select Store ID: ");

        existingListCombo.setMaximumRowCount(4);

        existingListButton.setText("Open");
        existingListButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                existingListButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(existingListCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(existingListButton)
                .addGap(25, 25, 25))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(existingListCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(existingListButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        addNo.setText("No.");
        addNo.setEnabled(false);
        addNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addNoActionPerformed(evt);
            }
        });
        addNo.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addNoFocusGained(evt);
            }
        });
        addNo.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addNoKeyTyped(evt);
            }
        });

        addDept.setText("Department");
        addDept.setEnabled(false);
        addDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDeptActionPerformed(evt);
            }
        });
        addDept.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addDeptFocusGained(evt);
            }
        });

        addVat.setText("VAT Rate");
        addVat.setEnabled(false);
        addVat.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addVatActionPerformed(evt);
            }
        });
        addVat.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addVatFocusGained(evt);
            }
        });
        addVat.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addVatKeyTyped(evt);
            }
        });

        addMargin.setText("Margin");
        addMargin.setEnabled(false);
        addMargin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMarginActionPerformed(evt);
            }
        });
        addMargin.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addMarginFocusGained(evt);
            }
        });
        addMargin.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addMarginKeyTyped(evt);
            }
        });

        addGroup.setText("Art. Grp. ");
        addGroup.setEnabled(false);
        addGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addGroupActionPerformed(evt);
            }
        });
        addGroup.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                addGroupFocusGained(evt);
            }
        });
        addGroup.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                addGroupKeyTyped(evt);
            }
        });

        addOk.setText("OK");
        addOk.setEnabled(false);
        addOk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addOkActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout editingPanelLayout = new javax.swing.GroupLayout(editingPanel);
        editingPanel.setLayout(editingPanelLayout);
        editingPanelLayout.setHorizontalGroup(
            editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editingPanelLayout.createSequentialGroup()
                .addComponent(addNo, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addDept, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addVat)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addMargin, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addGroup, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(addOk, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        editingPanelLayout.setVerticalGroup(
            editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(editingPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(editingPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addDept, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addVat, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addMargin, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addOk))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        newDept.setText("New");
        newDept.setEnabled(false);
        newDept.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newDeptActionPerformed(evt);
            }
        });

        edit.setText("Edit");
        edit.setEnabled(false);
        edit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editActionPerformed(evt);
            }
        });

        delete.setText("Delete");
        delete.setEnabled(false);
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        storeLocation.setEnabled(false);

        location.setText("Location:");
        location.setEnabled(false);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jButton1.setText("GO >>>");
        jButton1.setEnabled(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        export.setText("Export");
        export.setEnabled(false);
        export.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exportActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout setupPanelLayout = new javax.swing.GroupLayout(setupPanel);
        setupPanel.setLayout(setupPanelLayout);
        setupPanelLayout.setHorizontalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, setupPanelLayout.createSequentialGroup()
                        .addComponent(newListLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newListName, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(location)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(storeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(editingPanel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addComponent(export)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(delete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(edit)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(newDept)))
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(saveList)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, setupPanelLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1)
                        .addContainerGap())))
        );
        setupPanelLayout.setVerticalGroup(
            setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(setupPanelLayout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addGap(168, 168, 168)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(setupPanelLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 338, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(delete)
                        .addComponent(edit)
                        .addComponent(newDept))
                    .addComponent(export))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(editingPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(setupPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(newListLabel)
                    .addComponent(newListName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(location)
                    .addComponent(storeLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveList))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        controlPanel.setBackground(new java.awt.Color(255, 255, 255));
        controlPanel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        startButton.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        startButton.setText("Start");
        startButton.setEnabled(false);
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));
        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel4.setEnabled(false);

        productivity.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        productivity.setEnabled(false);

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Turn On Productivity Reporting:");
        jLabel8.setEnabled(false);

        dateOfTags.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        dateOfTags.setText("Stocktake Date:");
        dateOfTags.setEnabled(false);

        stDate.setBackground(new java.awt.Color(255, 255, 255));
        stDate.setEnabled(false);
        stDate.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        costComp.setEnabled(false);
        costComp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                costCompActionPerformed(evt);
            }
        });

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel10.setText("Turn On Cost Comparison:");
        jLabel10.setEnabled(false);

        jLabel36.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel36.setText("Start Time:");
        jLabel36.setEnabled(false);

        jLabel37.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel37.setText("Finish Time:");
        jLabel37.setEnabled(false);

        jSpinner1.setEnabled(false);

        jSpinner2.setEnabled(false);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dateOfTags)
                            .addComponent(jLabel36)
                            .addComponent(jLabel37))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(stDate, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jSpinner1)
                            .addComponent(jSpinner2)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(costComp))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 123, Short.MAX_VALUE)
                        .addComponent(productivity)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(stDate, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dateOfTags, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel36, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel37, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(productivity, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel10, javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(costComp, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 48)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("TagProcess");
        jLabel7.setToolTipText("");

        date.setEditable(false);
        date.setBorder(null);
        date.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.DateFormatter()));
        date.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        date.setToolTipText("");
        date.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        idLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        idLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        locLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        locLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);

        openFile.setText("Open");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        openFile.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                openFileAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        fileLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        fileLabel.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        fileLabel.setText("jLabel24");
        fileLabel.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                fileLabelAncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, 92, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(fileLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 198, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(openFile))
                    .addComponent(locLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 165, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, controlPanelLayout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(date, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(openFile)
                    .addComponent(fileLabel))
                .addGap(54, 54, 54)
                .addComponent(idLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 16, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(locLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(63, 63, 63)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        jMenu1.setText("File");

        jMenuItem1.setText("Close");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem1);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Tools");

        jMenuItem2.setText("Update VAT Rates");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuItem3.setText("Update Clerk List");
        jMenu2.add(jMenuItem3);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(setupPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(setupPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(controlPanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed

        SpinnerDateModel m1 = (SpinnerDateModel) jSpinner1.getModel();
        Date d1 = m1.getDate(); 
        SpinnerDateModel m2 = (SpinnerDateModel) jSpinner2.getModel();
        Date d2 = m2.getDate();

        
        
        timeDiff = getDateDiff(d1,d2,TimeUnit.MINUTES);
        
        
        
        if(stDate.getDate()==null){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "Date not set");
            stDate.requestFocus();
            return;
        }
        // The Saved folder contains saved sequence lists
        File file = new File("Misc\\Saved\\"+storeId+dateToString(stDate.getDate())+".tmp"); 
        
        if(file.exists()){ // If theres a saved file for the given DL / date combination 
            Object[] options = {"Restart",
                                "Continue"};
            int n = JOptionPane.showOptionDialog(null,
                "The selected stocktake has saved data \n"
                + "Continue and enter more tags or restart tag entry.",
                "Saved Data",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE,
                null,
                options,
                options[1]);
            if(n == 1)
                sequence.readFromFile(file); // Assigns the saved list object to the sequence variable. 
                int lastFirst = sequence.getTagNumber(0); 
                for(int i=1; i<sequence.length(); i++){
                    
                    
                    if(sequence.getTagNumber(i) != sequence.getTagNumber(i-1)+1){
                        seqWatch.append(lastFirst +" - " + sequence.getTagNumber(i-1) +"\n");
                        lastFirst = sequence.getTagNumber(i); 
                        
                    }
                    
                }
                seqWatch.append(lastFirst +" - " + sequence.getTagNumber(sequence.length()-1) +"\n");
                
            
        }    
        this.setVisible(false);
        ControlPanel.pack(); // Start the control panel window which will stay open til finish
        ControlPanel.setVisible(true);

        if(!productivity.isSelected()){
            clerkIn.setVisible(false);
            clerkLabel.setVisible(false);
            locationIn.requestFocus();
            proRep.setVisible(false);
        }
        else{
            clerkIn.requestFocus();

        }
        

    }//GEN-LAST:event_startButtonActionPerformed

    private void existingListButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_existingListButtonActionPerformed
        File rateFile = new File("Misc\\rates.txt"); // File containing the current 3 VAT rates. 
        try{
            BufferedReader reader = new BufferedReader(new FileReader(rateFile));
            // Write the VAT rates to an array 
            rates[0] = Float.parseFloat(reader.readLine());
            rates[1] = Float.parseFloat(reader.readLine());
            rates[2] = Float.parseFloat(reader.readLine());
            rates[3] = 0; 
            reader.close();
	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}

        
        export.setEnabled(true);
        jButton1.setEnabled(true); 
        table.setVisible(true);
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        String line = "";
        // The file containing selected department list 
        String fileName = new StringBuilder("Department Lists\\").append(existingListCombo.getSelectedItem().toString()).append(".txt").toString();
        System.out.println(fileName);
        try{
            BufferedReader br = new BufferedReader(new FileReader(fileName));
            storeLocationInfo = br.readLine(); // First lines of department lists are store descriptions 
            while((line = br.readLine())!=null){
                String[] entry = line.split(",");
                // Split each line on comma and create an obect
                Object[] data = {
                    new Double(Double.parseDouble(entry[0].replaceAll("\\s+",""))),
                    capitalise(entry[1]).trim(),
                    new Float(Float.parseFloat(entry[2].replaceAll("\\s+",""))),
                    new Double(Double.parseDouble(entry[3].replaceAll("\\s+",""))),
                    new String(entry[4].replaceAll("\\s+","")),
                };
                tm.addRow(data); // Add each line object to the table. 
                
            }
	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}
        storeId = existingListCombo.getSelectedItem().toString(); 
        table.setEnabled(false);
    }//GEN-LAST:event_existingListButtonActionPerformed

    private void fromTemplateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fromTemplateActionPerformed
        File rateFile = new File("Misc\\rates.txt");
        try{
            BufferedReader reader = new BufferedReader(new FileReader(rateFile));
            rates[0] = Float.parseFloat(reader.readLine());
            rates[1] = Float.parseFloat(reader.readLine());
            rates[2] = Float.parseFloat(reader.readLine());
            rates[3] = 0; 
            reader.close();
	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}
        
        jButton1.setEnabled(true); 
        storeId = fromTemplateCombo.getSelectedItem().toString(); 
        table.setVisible(true);
        DefaultTableModel tm = (DefaultTableModel) table.getModel();
        tm.setRowCount(0);
        String line = "";
        String fileName = new StringBuilder("Department Lists\\").append(fromTemplateCombo.getSelectedItem().toString()).append(".txt").toString();
        System.out.println(fileName);
        try{
            BufferedReader br = new BufferedReader(new FileReader(fileName));
            storeLocationInfo = br.readLine(); 
            while((line = br.readLine())!=null){
                String[] entry = line.split(",");
                Object[] data = {
                    new Double(Double.parseDouble(entry[0].replaceAll("\\s+",""))),
                    capitalise(entry[1]).trim(),
                    new Float(Float.parseFloat(entry[2].replaceAll("\\s+",""))),
                    new Double(Double.parseDouble(entry[3].replaceAll("\\s+",""))),
                    new String(entry[4].replaceAll("\\s+","")),
                };
                tm.addRow(data);
                
            }
	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}   
        newListLabel.setEnabled(true);
        newListName.setEnabled(true);
        saveList.setEnabled(true); 
        table.setEnabled(true);
        newDept.setEnabled(true);
        edit.setEnabled(true);
        delete.setEnabled(true);
        location.setEnabled(true);
        storeLocation.setEnabled(true);
    }//GEN-LAST:event_fromTemplateActionPerformed

    private void saveListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveListActionPerformed
        storeLocationInfo = capitalise(storeLocation.getText());
        String name = newListName.getText();
        if (table.isEditing())
            table.getCellEditor().stopCellEditing();
        if(name.length() != 6){
            JOptionPane.showMessageDialog(null, "Store ID must be 6 characters in length");
            newListName.setText("");
            newListName.requestFocus();
        }
        else if(storeLocation.getText().equals("")){
            JOptionPane.showMessageDialog(null, "You must enter a store location.");
            storeLocation.requestFocus();
        }
        else if(!isTableComplete()){
            isTableComplete(); 
            getToolkit().beep();
            
        }
        else{
            String newFileName = new StringBuilder("Department Lists\\")
                    .append(name.toUpperCase()).append(".txt").toString();
            Object[][] newTableData = getTableData(table);
            
            try{
              BufferedWriter bw = new BufferedWriter(new FileWriter(newFileName));
              bw.write(storeLocationInfo + "\r\n");
              for(int i=0;i<newTableData.length;i++){
                      bw.write(newTableData[i][0]+","+newTableData[i][1]+","
                              +newTableData[i][2]+","+newTableData[i][3]+","
                              +newTableData[i][4]+"\r\n");
              }
              bw.close();
            }catch(IOException ioe){
                  System.out.print(ioe);
            }
            String newReportFolder = new StringBuilder("Reports\\")
                    .append(name.toUpperCase()).toString();
            File dir = new File(newReportFolder);
            dir.mkdir();
            JOptionPane.showMessageDialog(null, "New file saved!");
            addNo.setEnabled(false);addDept.setEnabled(false);addMargin.setEnabled(false);
            addVat.setEnabled(false);addGroup.setEnabled(false);addOk.setEnabled(false);
            saveList.setEnabled(false);newListName.setEnabled(false);location.setEnabled(false);
            storeLocation.setEnabled(false); 
            storeId = newListName.getText().toUpperCase();
        }
 
        

    }//GEN-LAST:event_saveListActionPerformed

    private void addNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addNoKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_addNoKeyTyped

    private void addVatKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addVatKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }    }//GEN-LAST:event_addVatKeyTyped

    private void addMarginKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addMarginKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_addMarginKeyTyped

    private void addGroupKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_addGroupKeyTyped

    }//GEN-LAST:event_addGroupKeyTyped

    private void addNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addNoActionPerformed

        addDept.requestFocus();
    }//GEN-LAST:event_addNoActionPerformed

    private void addVatActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addVatActionPerformed
        addMargin.requestFocus();
    }//GEN-LAST:event_addVatActionPerformed

    private void addDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDeptActionPerformed
        addVat.requestFocus();
    }//GEN-LAST:event_addDeptActionPerformed

    private void addGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addGroupActionPerformed
        addOk.requestFocus();
    }//GEN-LAST:event_addGroupActionPerformed

    private void newDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newDeptActionPerformed
        addNo.setEditable(true); 
        addNo.setText("No.");addDept.setText("Department");addGroup.setText("Art. Grp.");
        addVat.setText("Vat Rate");addMargin.setText("Margin"); 
        addNo.setEnabled(true);
        addDept.setEnabled(true);
        addVat.setEnabled(true);
        addMargin.setEnabled(true);
        addGroup.setEnabled(true);
        addOk.setEnabled(true);
        addNo.requestFocus();
        edit.setEnabled(false);
        isNew = true; 
        
    }//GEN-LAST:event_newDeptActionPerformed

    private void addMarginActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMarginActionPerformed
        addGroup.requestFocus();
    }//GEN-LAST:event_addMarginActionPerformed

    private void addNoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addNoFocusGained
        addNo.selectAll();
    }//GEN-LAST:event_addNoFocusGained

    private void addDeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addDeptFocusGained
        addDept.selectAll();
    }//GEN-LAST:event_addDeptFocusGained

    private void addVatFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addVatFocusGained
        addVat.selectAll();
    }//GEN-LAST:event_addVatFocusGained

    private void addMarginFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addMarginFocusGained
        addMargin.selectAll();
    }//GEN-LAST:event_addMarginFocusGained

    private void addGroupFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_addGroupFocusGained
        addGroup.selectAll();
    }//GEN-LAST:event_addGroupFocusGained

    
    private void addOkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addOkActionPerformed

        if(addNo.getText().trim().equals("") || addDept.getText().trim().equals("")
                || addVat.getText().trim().equals("") || addMargin.getText().trim().equals("")
                || addGroup.getText().trim().equals("")){
            JOptionPane.showMessageDialog(null, "All fields must contain data to"
                    + " add to table.");
            addNo.requestFocus();
        }else if(Float.parseFloat(addVat.getText().trim())!= rates[0] && Float.parseFloat(addVat.getText().trim()) != rates[1]
                && Float.parseFloat(addVat.getText().trim()) != rates[2] && Float.parseFloat(addVat.getText().trim()) != rates[3]){
            JOptionPane.showMessageDialog(null, "Not a valid VAT rate");
        }else if(isNew && isDeptUnique(addNo.getText())){
            DefaultTableModel tm = (DefaultTableModel) table.getModel();
            Object[] data = {
                new Double(Double.parseDouble(addNo.getText())),
                capitalise(addDept.getText()).trim(),
                new Float(Float.parseFloat(addVat.getText())),
                new Double(Double.parseDouble(addMargin.getText())),
                new String(addGroup.getText()),
                    };
            tm.addRow(data); 

            
            addNo.setEnabled(false);addDept.setEnabled(false);addGroup.setEnabled(false);
            addVat.setEnabled(false);addMargin.setEnabled(false);addOk.setEnabled(false);
            addNo.setText("No.");addDept.setText("Department");addGroup.setText("Art. Grp.");
            addVat.setText("Vat Rate");addMargin.setText("Margin"); 
            table.requestFocus();
            
            table.getRowSorter().toggleSortOrder(3);
            table.getRowSorter().toggleSortOrder(0);

            
            isNew = false; 
        }
        else if(!isDeptUnique(addNo.getText()) && isNew){
            JOptionPane.showMessageDialog(null, "You must enter a department number "
                    + "not already listed to create a new deapartment"); 
            addNo.requestFocus();
        }
        else if(!isNew){
            table.setValueAt(capitalise(addDept.getText().trim()), selected, 1);
            table.setValueAt(Float.parseFloat(addVat.getText()), selected, 2);
            table.setValueAt(Double.parseDouble(addMargin.getText()), selected, 3);
            table.setValueAt(addGroup.getText(), selected, 4);
            
        }
        newDept.setEnabled(true);edit.setEnabled(true);
    }//GEN-LAST:event_addOkActionPerformed

    private void editActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editActionPerformed
        newDept.setEnabled(false);
        int row = table.getSelectedRow();
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Please select the row that you want to edit");
            table.requestFocus();
        }
        else{
            addNo.setEnabled(true);addNo.setEditable(false);addDept.setEnabled(true);addGroup.setEnabled(true);
            addVat.setEnabled(true);addMargin.setEnabled(true);addOk.setEnabled(true);
            addNo.setText(table.getValueAt(row, 0).toString());addDept.setText(table.getValueAt(row, 1).toString());
            addGroup.setText(table.getValueAt(row, 4).toString());addVat.setText(table.getValueAt(row, 2).toString());
            addMargin.setText(table.getValueAt(row, 3).toString());addDept.requestFocus(); 
            selected = row; 
        }
    }//GEN-LAST:event_editActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        int row = table.getSelectedRow();
        int rowActual = table.convertRowIndexToModel(row); 
        if(row == -1){
            JOptionPane.showMessageDialog(null, "Please select the row that you want to delete");
            table.requestFocus();
        }
        else{
            String message = new StringBuilder("Confirm deletion of department: ").append(table.getValueAt(row, 0).toString()).toString();
            int confirm = JOptionPane.showConfirmDialog(null, message ,"Delete", JOptionPane.YES_NO_OPTION);
            if(confirm == 0){
                DefaultTableModel model = (DefaultTableModel) this.table.getModel();
                
                model.removeRow(rowActual);
                
            }
                    
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

            if(newListName.isEnabled()){
                Object[] options = {"Cancel", "OK"};
                int saveOnGo = JOptionPane.showOptionDialog(null, "Save Department List as " + storeId +"?",
                        "Save List?", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[1]); 
                if(saveOnGo == 0){
                    newListName.requestFocus();
                    return; 
                }
                else{
                     if (table.isEditing())
                         table.getCellEditor().stopCellEditing();


                     if(!isTableComplete()){
                         isTableComplete(); 
                         getToolkit().beep();
                         return;

                     }
                     else{
                         String newFileName = new StringBuilder("Department Lists\\")
                                 .append(storeId.toUpperCase()).append(".txt").toString();
                         Object[][] newTableData = getTableData(table);

                         try{
                           BufferedWriter bw = new BufferedWriter(new FileWriter(newFileName));
                           bw.write(storeLocationInfo + "\r\n");
                           for(int i=0;i<newTableData.length;i++){
                                   bw.write(newTableData[i][0]+","+newTableData[i][1]+","
                                           +newTableData[i][2]+","+newTableData[i][3]+","
                                           +newTableData[i][4]+"\r\n");
                           }
                           bw.close();
                         }catch(IOException ioe){
                               System.out.print(ioe);
                         }
                     }
                }
            
        }
        SpinnerDateModel model = new SpinnerDateModel();
        model.setCalendarField(Calendar.MINUTE);
        
        SpinnerDateModel model2 = new SpinnerDateModel();
        model2.setCalendarField(Calendar.MINUTE);


        jSpinner1.setModel(model);
        jSpinner1.setEditor(new JSpinner.DateEditor(jSpinner1, "HH:mm"));
        jSpinner2.setModel(model2);
        jSpinner2.setEditor(new JSpinner.DateEditor(jSpinner2, "HH:mm"));
        
        
        jLabel1.setEnabled(false);jPanel1.setEnabled(false);jLabel2.setEnabled(false);
        jPanel2.setEnabled(false);table.setEnabled(false);existingListButton.setEnabled(false);
        fromTemplate.setEnabled(false);delete.setEnabled(false);edit.setEnabled(false);
        jLabel36.setEnabled(true);jLabel37.setEnabled(true);jSpinner1.setEnabled(true);
        jSpinner2.setEnabled(true);
        newDept.setEnabled(false);existingListCombo.setEnabled(false);fromTemplateCombo.setEnabled(false);
        panelEnable(controlPanel, true); 
        panelEnable(jPanel4, true); 
        idLabel.setText(storeId);
        locLabel.setText(storeLocationInfo);
        for(int i=0;i<table.getRowCount();i++){
            DepartmentDetail temp = new DepartmentDetail(
                table.getValueAt(i, 1).toString(), Double.parseDouble(table.getValueAt(i, 2).toString()), 
                Double.parseDouble(table.getValueAt(i, 3).toString()),
                table.getValueAt(i, 4).toString()
            );
            liveListHash.put(Double.parseDouble(table.getValueAt(i, 0).toString()), temp);
            s.add(Integer.parseInt(table.getValueAt(i, 4).toString()));
            names.add(table.getValueAt(i, 1).toString());
            
        }
        System.out.println(names);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void locationInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_locationInActionPerformed
        if(locationIn.getText().equals("")){
            getToolkit().beep();
            locationIn.requestFocus();
            return;
        }
        deptIn.requestFocus();
    }//GEN-LAST:event_locationInActionPerformed

    private void deptInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_deptInKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_deptInKeyTyped

    private void valueInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_valueInKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_valueInKeyTyped

    private void deptInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deptInActionPerformed
        if(deptIn.getText().equals("")){
            getToolkit().beep();
            deptIn.requestFocus();
            return;
        }
        if(!deptIn.getText().equals("")){
            valueIn.requestFocus();
        }
        deptDisp.setText(returnDeptName(Double.parseDouble(deptIn.getText())));
    }//GEN-LAST:event_deptInActionPerformed

    private void valueInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_valueInActionPerformed
        if(valueIn.getText().equals("")){
            getToolkit().beep();
            valueIn.requestFocus();
            return;
        }
        adjIn.requestFocus();
    }//GEN-LAST:event_valueInActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        this.setVisible(true);
        Input.setVisible(false);
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        try{
            Desktop.getDesktop().open(new File(newFileName));
        }catch(FileNotFoundException ex){
            
        }catch(IOException ioe){
            
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void openFileAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_openFileAncestorAdded

    }//GEN-LAST:event_openFileAncestorAdded

    private void fileLabelAncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_fileLabelAncestorAdded

    }//GEN-LAST:event_fileLabelAncestorAdded

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus

    }//GEN-LAST:event_formWindowGainedFocus

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        openFile.setVisible(false);
        fileLabel.setVisible(false);
    }//GEN-LAST:event_formWindowOpened

    private void clerkInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clerkInActionPerformed
        if(clerkIn.getText().equals("")){
            getToolkit().beep();
            clerkIn.requestFocus();
            return;
        }
            if(locationIn.getText().equals("")){
                getToolkit().beep();
                locationIn.requestFocus();
                return;
            }
            if(valueIn.getText().equals("")){
                getToolkit().beep();
                valueIn.requestFocus();
                return;
            }
            if(deptIn.getText().equals("")){
                getToolkit().beep();
                deptIn.requestFocus();
                return;
            }
            if(productivity.isSelected()){
                if (clerkInfo.containsKey(Integer.parseInt(clerkIn.getText()))){
                    int[] temp = (int[])clerkInfo.get(Integer.parseInt(clerkIn.getText()));
                            float lessV = ((float) Integer.parseInt(valueIn.getText()) / (((returnVat(Double.parseDouble(deptIn.getText())))/100)+1));
                            Math.round(lessV);
                            int iLessV = (int) lessV; 
                            int cost = (int)(lessV - ((returnMargin(Double.parseDouble(deptIn.getText()))*lessV)/100));
                    clerkInfo.put(Integer.parseInt(clerkIn.getText()), new int[]{Integer.parseInt(valueIn.getText())+temp[0], Integer.parseInt(adjIn.getText())+temp[1]});
                }
                else{
                    float lessV = ((float) Integer.parseInt(valueIn.getText()) / (((returnVat(Double.parseDouble(deptIn.getText())))/100)+1));
                    Math.round(lessV);
                    int iLessV = (int) lessV; 
                    int cost = (int)(lessV - ((returnMargin(Double.parseDouble(deptIn.getText()))*lessV)/100));
                    clerkInfo.put(Integer.parseInt(clerkIn.getText()), new int[]{Integer.parseInt(valueIn.getText()), Integer.parseInt(adjIn.getText())});
                }
            }
            System.out.println(clerkInfo);
            if(!liveListHash.containsKey(Double.parseDouble(deptIn.getText()))){
                Object[] options = {"Add New Code", "Re-enter"};
                int deptCheck = JOptionPane.showOptionDialog(null, "The Department Code: " + deptIn.getText()
                        +" is not present in the selected Department list.",
                        "Dep Code not found", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[1]);
                deptIn.requestFocus();
                if(deptCheck == 1){
                    deptIn.requestFocus();
                    deptIn.selectAll();
                }
                else{
                    JTextField field1 = new JTextField();
                    field1.setText(deptIn.getText());
                    JTextField field2 = new JTextField();  
                    JTextField field3 = new JTextField();  
                    JTextField field4 = new JTextField();  
                    JTextField field5 = new JTextField();  
                    Object[] message = {  
                        "Dept No:", field1,  
                        "Dept Name:", field2,  
                        "VAT Rate:", field3,  
                        "Margin:", field4,  
                        "Art Grp:", field5,  
                    };  
                    int option = JOptionPane.showConfirmDialog(null, message, "Enter all values", JOptionPane.OK_CANCEL_OPTION);
                    while(field2.getText().equals("") || !checkIfNumber(field3.getText()) || 
                            !checkIfNumber(field4.getText()) || !checkIfNumber(field3.getText())
                            || !checkRates(Float.parseFloat(field3.getText()))){
                        JOptionPane.showMessageDialog(null, "Invalid Entry");
                        option = JOptionPane.showConfirmDialog(null, message, "Enter all your values", JOptionPane.OK_CANCEL_OPTION);

                    }

                    DepartmentDetail temp = new DepartmentDetail(
                        field2.getText(), Double.parseDouble(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        field5.getText()
                    );
                    liveListHash.put(Double.parseDouble(field1.getText()), temp);
                    DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
                    Object[] row = {
                        Double.parseDouble(field1.getText()),
                        field2.getText(), Float.parseFloat(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        Integer.parseInt(field5.getText())
                    }; 
                    tm.addRow(row); 
                         String newFileName = new StringBuilder("Department Lists\\")
                                 .append(storeId.toUpperCase()).append(".txt").toString();
                         Object[][] newTableData = getTableData(table);

                         try{
                           BufferedWriter bw = new BufferedWriter(new FileWriter(newFileName));
                           bw.write(storeLocationInfo + "\r\n");
                           for(int i=0;i<newTableData.length;i++){
                                   bw.write(newTableData[i][0]+","+newTableData[i][1]+","
                                           +newTableData[i][2]+","+newTableData[i][3]+","
                                           +newTableData[i][4]+"\r\n");
                           }
                           bw.close();
                         }catch(IOException ioe){
                               System.out.print(ioe);
                         }

                }

            }
            else{
                int index = Integer.parseInt(tagNo.getText());

                if(productivity.isSelected())
                    clerk = Integer.parseInt(clerkIn.getText());
                else
                    clerk = 0; 
                department = Float.parseFloat(deptIn.getText());
                tagAdjustment = Integer.parseInt(adjIn.getText());
                value = Integer.parseInt(valueIn.getText());
                tagLocation = locationIn.getText();
                thisTagNo = Integer.parseInt(tagNo.getText()); 

                sequence.add(thisTagNo, tagLocation, department, value, tagAdjustment, clerk, srCheckBox.isSelected(), false );

                index++; 

                if(thisTagNo == Integer.parseInt(last.getText())){
                    JOptionPane.showMessageDialog(null, "Pass 1 complete");
                    Input.setVisible(false);

                    FullInput.pack();
                    FullInput.setVisible(true);
                    tagCount = Integer.parseInt(first.getText());
                    Input.dispose();
                    p2TagNo.requestFocus();
                    p2TagNo.setText("");
                    p2Location.setText("");
                    p2Area.setText("");
                    p2Dept.setText("");
                    p2Total.setText("");
                }


                deptIn.setText("");valueIn.setText("");adjIn.setText("0");
                adjVIn.setText(""); clerkIn.setText(""); 
                tagNo.setText(Integer.toString(index)); 

                deptDisp.setText("");
                deptIn.requestFocus();
            }
    }//GEN-LAST:event_clerkInActionPerformed

    private void adjInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adjInKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.' || c == '-') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_adjInKeyTyped

    private void adjVInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_adjVInKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.' ) || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_adjVInKeyTyped

    private void clerkInKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_clerkInKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_clerkInKeyTyped

    private void adjInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjInActionPerformed
        if(adjIn.getText().equals("")){
            getToolkit().beep();
            adjIn.requestFocus();
            return;
        }
        adjVIn.setText(Integer.toString((Integer.parseInt(valueIn.getText()) + 
                Integer.parseInt(adjIn.getText()))));
        adjVIn.requestFocus();
    }//GEN-LAST:event_adjInActionPerformed

    private void adjVInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_adjVInActionPerformed
        if(!productivity.isSelected()){
            if(locationIn.getText().equals("")){
                getToolkit().beep();
                locationIn.requestFocus();
                return;
            }
            if(valueIn.getText().equals("")){
                getToolkit().beep();
                valueIn.requestFocus();
                return;
            }
            if(deptIn.getText().equals("")){
                getToolkit().beep();
                deptIn.requestFocus();
                return;
            }
            if(productivity.isSelected()){
                if (clerkInfo.containsKey(Integer.parseInt(clerkIn.getText()))){
                    int[] temp = (int[])clerkInfo.get(Integer.parseInt(clerkIn.getText()));
                    clerkInfo.put(Integer.parseInt(clerkIn.getText()), new int[]{Integer.parseInt(valueIn.getText())+temp[0], Integer.parseInt(adjIn.getText())+temp[1]});
                }
                else{
                    clerkInfo.put(Integer.parseInt(clerkIn.getText()), new int[]{Integer.parseInt(valueIn.getText()), Integer.parseInt(adjIn.getText())});
                }
            }
            System.out.println(clerkInfo);
            if(!liveListHash.containsKey(Double.parseDouble(deptIn.getText()))){
                Object[] options = {"Add New Code", "Re-enter"};
                int deptCheck = JOptionPane.showOptionDialog(null, "The Department Code: " + deptIn.getText()
                        +" is not present in the selected Department list.",
                        "Dep Code not found", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[1]);
                deptIn.requestFocus();
                if(deptCheck == 1){
                    deptIn.requestFocus();
                    deptIn.selectAll();
                }
                else{
                    JTextField field1 = new JTextField();
                    field1.setText(deptIn.getText());
                    JTextField field2 = new JTextField();  
                    JTextField field3 = new JTextField();  
                    JTextField field4 = new JTextField();  
                    JTextField field5 = new JTextField();  
                    Object[] message = {  
                        "Dept No:", field1,  
                        "Dept Name:", field2,  
                        "VAT Rate:", field3,  
                        "Margin:", field4,  
                        "Art Grp:", field5,  
                    };  
                    int option = JOptionPane.showConfirmDialog(null, message, "Enter all values", JOptionPane.OK_CANCEL_OPTION);
                    while(field2.getText().equals("") || !checkIfNumber(field3.getText()) || 
                            !checkIfNumber(field4.getText()) || !checkIfNumber(field3.getText())
                            || !checkRates(Float.parseFloat(field3.getText()))){
                        JOptionPane.showMessageDialog(null, "Invalid Entry");
                        option = JOptionPane.showConfirmDialog(null, message, "Enter all your values", JOptionPane.OK_CANCEL_OPTION);

                    }

                    DepartmentDetail temp = new DepartmentDetail(
                        field2.getText(), Double.parseDouble(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        field5.getText()
                    );
                    liveListHash.put(Double.parseDouble(field1.getText()), temp);
                    DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
                    Object[] row = {
                        Double.parseDouble(field1.getText()),
                        field2.getText(), Float.parseFloat(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        Integer.parseInt(field5.getText())
                    }; 
                    tm.addRow(row); 
                    String newFileName = new StringBuilder("Department Lists\\")
                            .append(storeId.toUpperCase()).append(".txt").toString();
                    Object[][] newTableData = getTableData(table);

                    try{
                      BufferedWriter bw = new BufferedWriter(new FileWriter(newFileName));
                      bw.write(storeLocationInfo + "\r\n");
                      for(int i=0;i<newTableData.length;i++){
                              bw.write(newTableData[i][0]+","+newTableData[i][1]+","
                                      +newTableData[i][2]+","+newTableData[i][3]+","
                                      +newTableData[i][4]+"\r\n");
                      }
                      bw.close();
                    }catch(IOException ioe){
                          System.out.print(ioe);
                    }

                }

            }
            else{
                int index = Integer.parseInt(tagNo.getText());

                if(productivity.isSelected())
                    clerk = Integer.parseInt(clerkIn.getText());
                else
                    clerk = 0; 
                department = Float.parseFloat(deptIn.getText());
                tagAdjustment = Integer.parseInt(adjIn.getText());
                value = Integer.parseInt(valueIn.getText());
                tagLocation = locationIn.getText();
                thisTagNo = Integer.parseInt(tagNo.getText()); 

                sequence.add(thisTagNo, tagLocation, department, value, tagAdjustment, clerk, srCheckBox.isSelected(), false );

                index++; 

                if(thisTagNo == Integer.parseInt(last.getText())){
                    JOptionPane.showMessageDialog(null, "Pass 1 complete");
                    Input.setVisible(false);

                    FullInput.pack();
                    FullInput.setVisible(true);
                    tagCount = Integer.parseInt(first.getText()); 
                    Input.dispose();
                    p2TagNo.requestFocus();
                    p2TagNo.setText("");
                    p2Location.setText("");
                    p2Area.setText("");
                    p2Dept.setText("");
                    p2Total.setText("");
                }


                deptIn.setText("");valueIn.setText("");adjIn.setText("0");
                adjVIn.setText(""); clerkIn.setText(""); 
                tagNo.setText(Integer.toString(thisTagNo + 1)); 
                
                deptDisp.setText("");
                deptIn.requestFocus();

            }   
        }else{
            clerkIn.requestFocus();
        }
    }//GEN-LAST:event_adjVInActionPerformed

    private void p2AreaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2AreaActionPerformed
        if(p2Area.getText().equals("")){
            getToolkit().beep();
            p2Area.requestFocus();
            return;
        }
        p2Location.setText(sequence.getLocation(Integer.parseInt(p2TagNo.getText())-1)); 
        p2Location.requestFocus(); 
    }//GEN-LAST:event_p2AreaActionPerformed

    private void p2TagNoKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_p2TagNoKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) ) || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_p2TagNoKeyTyped

    private void p2DeptKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_p2DeptKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_p2DeptKeyTyped

    private void p2TotalKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_p2TotalKeyTyped
        char c = evt.getKeyChar();
        if(!((Character.isDigit(c) || c == '.') || (c == KeyEvent.VK_BACK_SPACE) 
                || (c == KeyEvent.VK_DELETE) || (c == KeyEvent.VK_ENTER))){
            evt.consume();
            getToolkit().beep();
        }
    }//GEN-LAST:event_p2TotalKeyTyped

    private void p2TagNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2TagNoActionPerformed
        if(p2TagNo.getText().equals("")){
            getToolkit().beep();
            p2TagNo.requestFocus();
            return;
        }
        try{
            Integer.parseInt(p2TagNo.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            p2TagNo.requestFocus();
            return; 
        }
        Tag tag = sequence.returnTag(tagCount);
        if(tag.getStockRoom()){ // xxxxxxxxxxxxxxxxxxx
            p2Area.setText("S/R");       
        }
        else{
            p2Area.setText("S/F"); 
        }
        p2Location.setText(tag.getLocation());
        p2Dept.requestFocus(); 
        
        if(Integer.parseInt(p2TagNo.getText())%10 != tagCount%10){
            getToolkit().beep();
            JOptionPane.showMessageDialog(null, "You have entered a tag out of sequence \n" +
                    "Previous tag number: " + Integer.toString(tagCount-1));
            p2TagNo.requestFocus();
            p2TagNo.selectAll();
            return; 
        }
        
        
    }//GEN-LAST:event_p2TagNoActionPerformed
    int tagCount; 
    private void p2LocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2LocationActionPerformed
        if(p2Location.getText().equals("")){
            getToolkit().beep();
            p2Location.requestFocus();
            return;
        }
        p2Dept.requestFocus();
        p2Dept.selectAll();
    }//GEN-LAST:event_p2LocationActionPerformed

    private void p2DeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2DeptActionPerformed
        if(p2Dept.getText().equals("")){
            getToolkit().beep();
            p2Dept.requestFocus();
            return;
        }
        try{
            Double.parseDouble(p2Dept.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            p2Dept.requestFocus();
            p2Dept.selectAll();
            return;
        }
        p2Total.requestFocus();
    }//GEN-LAST:event_p2DeptActionPerformed

    private void p2TotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_p2TotalActionPerformed
        if(p2Total.getText().equals("")){
            getToolkit().beep();
            p2Total.requestFocus();
            p2Total.selectAll();
            return;
        }
        try{
            Integer.parseInt(p2Total.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            p2Total.requestFocus();
            p2Total.selectAll();
            return;
        }

            
        int tagNumber = tagCount;
        int tagValue = Integer.parseInt(p2Total.getText()); 
        float tagDepartment = Float.parseFloat(p2Dept.getText());
        Tag tag = sequence.returnTag(tagNumber); 

        if(tagDepartment != tag.getdepartment()){
          boolean bool = false; 
          float repDept = 0; 
          while(!bool){
            getToolkit().beep();
            String s = JOptionPane.showInputDialog(null, "Pass 1 and pass 2 departments do not match.: \n"
                    +"Pass 1: "+Float.toString(tag.getdepartment())+"\n"+"Pass 2: "+p2Dept.getText()+
                    "\n Please carefully enter final value.");

            
            
           if(!liveListHash.containsKey(Double.parseDouble(s))){
                Object[] options = {"Add New Code", "Re-enter"};
                int deptCheck = JOptionPane.showOptionDialog(null, "The Department Code: " + deptIn.getText()
                        +" is not present in the selected Department list.",
                        "Dep Code not found", JOptionPane.YES_NO_CANCEL_OPTION, JOptionPane.QUESTION_MESSAGE,
                        null, options, options[1]);
                p2Dept.requestFocus();
                if(deptCheck == 1){
                    p2Dept.requestFocus();
                    p2Dept.selectAll();
                }
                else{
                    JTextField field1 = new JTextField();
                    field1.setText(s);
                    JTextField field2 = new JTextField();  
                    JTextField field3 = new JTextField();  
                    JTextField field4 = new JTextField();  
                    JTextField field5 = new JTextField();  
                    Object[] message = {  
                        "Dept No:", field1,  
                        "Dept Name:", field2,  
                        "VAT Rate:", field3,  
                        "Margin:", field4,  
                        "Art Grp:", field5,  
                    };  
                    int option = JOptionPane.showConfirmDialog(null, message, "Enter all values", JOptionPane.OK_CANCEL_OPTION);
                    
                    
                    
                    while(field2.getText().equals("") || !checkIfNumber(field3.getText()) || 
                            !checkIfNumber(field4.getText()) || !checkIfNumber(field3.getText())
                            || !checkRates(Float.parseFloat(field3.getText()))){
                        JOptionPane.showMessageDialog(null, "Invalid Entry");
                        option = JOptionPane.showConfirmDialog(null, message, "Enter all your values", JOptionPane.OK_CANCEL_OPTION);

                    }

                    DepartmentDetail temp = new DepartmentDetail(
                        field2.getText(), Double.parseDouble(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        field5.getText()
                    );
                    liveListHash.put(Double.parseDouble(field1.getText()), temp);
                    DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
                    Object[] row = {
                        Double.parseDouble(field1.getText()),
                        field2.getText(), Float.parseFloat(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        Integer.parseInt(field5.getText())
                    }; 
                    tm.addRow(row); 
                         String newFileName = new StringBuilder("Department Lists\\")
                                 .append(storeId.toUpperCase()).append(".txt").toString();
                         Object[][] newTableData = getTableData(table);

                         try{
                           BufferedWriter bw = new BufferedWriter(new FileWriter(newFileName));
                           bw.write(storeLocationInfo + "\r\n");
                           for(int i=0;i<newTableData.length;i++){
                                   bw.write(newTableData[i][0]+","+newTableData[i][1]+","
                                           +newTableData[i][2]+","+newTableData[i][3]+","
                                           +newTableData[i][4]+"\r\n");
                           }
                           bw.close();
                         }catch(IOException ioe){
                               System.out.print(ioe);
                         }

                }

            }
            
            
            
            
            
            try{
                repDept = Float.parseFloat(s);
                bool = true; 
            }catch(NumberFormatException nfe){
               bool = false;                 
            }

          }
          sequence.setDepartment(sequence.returnIndex(tagNumber), repDept);
 

        }
        if(tagValue != (tag.getValue()+tag.getadjustment())){
          boolean bool = false; 
          int repValue = 0; 
          while(!bool){
            getToolkit().beep();
            String s = JOptionPane.showInputDialog(null, "Pass 1 and pass 2 values do not match.: \n"
                    +"Pass 1: "+Integer.toString(tag.getValue()+tag.getadjustment())+"\n"+"Pass 2: "+p2Total.getText()+
                    "\n Please carefully enter final value.");
            try{
                repValue = Integer.parseInt(s);
                bool = true; 
            }catch(NumberFormatException nfe){
               bool = false;                 
            }

          }
          sequence.setValue(sequence.returnIndex(tagNumber), repValue);
          sequence.setAdjustment(sequence.returnIndex(tagNumber), 0);
        }
        sequence.setVerified(sequence.returnIndex(tagNumber), true);
        showPrev.setText(Integer.toString(tagCount));
        System.out.println(sequence.getDepartment(p2Index-1));
        p2TagNo.setText("");
        p2Total.setText("");
        p2Dept.setText("");
        p2TagNo.requestFocus();
        
        if(tagCount == Integer.parseInt(last.getText())){
            JOptionPane.showMessageDialog(null, "Pass 2 Complete");
            FullInput.setVisible(false);
            FullInput.dispose();
            seqWatch.append(first.getText()+" - " +last.getText()+"\n");
            sequence.sortSequence();
            
       
            return; 
        }
        tagCount++;  
    }//GEN-LAST:event_p2TotalActionPerformed

    private void checkTNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkTNoActionPerformed
        int tagNumber = Integer.parseInt(checkTNo.getText())-1;

        DepartmentDetail object = (DepartmentDetail) liveListHash.get((double)sequence.getDepartment(tagNumber));
        checkDept.setText(object.getName());
        checkVat.setText(Double.toString(object.getVat()));
        checkMargin.setText(Double.toString(object.getMargin()));
        checkArticle.setText(object.getArticle());
        checkValue.setText(Integer.toString(sequence.getValue(tagNumber)+sequence.getAdjustment(tagNumber)));
    }//GEN-LAST:event_checkTNoActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        
        File rateFile = new File("Misc\\rates.txt");
        try{
            BufferedReader br = new BufferedReader(new FileReader(rateFile));
            vr1 = Float.parseFloat(br.readLine());
            vr2 = Float.parseFloat(br.readLine());
            vr3 = Float.parseFloat(br.readLine());
            br.close();
	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}
        ChangeRates.pack();
        ChangeRates.setVisible(true);
        jLabel29.setText(Float.toString(vr1)+" --->");
        jLabel30.setText(Float.toString(vr2)+" --->");
        jLabel31.setText(Float.toString(vr3)+" --->");
       


        
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        try{
            Float.parseFloat(rate1.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            rate1.requestFocus();
            rate1.selectAll();
            return; 
        }
        try{
            Float.parseFloat(rate2.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            rate1.requestFocus();
            rate1.selectAll();
            return; 
        }
        try{
            Float.parseFloat(rate3.getText());
        }catch(NumberFormatException nfe){
            getToolkit().beep();
            rate1.requestFocus();
            rate1.selectAll();
            return; 
        }
        File[] files = new File("Department Lists").listFiles();
        

        for(File file : files){
                System.out.println("Start of loop");
                File temp = new File(("Department Lists\\temp.txt"));
                try {
                        BufferedReader in = new BufferedReader(new FileReader(file));
                        PrintWriter out = new PrintWriter(temp);
                        
                        String line; //a line in the file
                        String params[]; //holds the name:number:color parameters of each line
                        out.println(in.readLine());
                        while ((line = in.readLine()) != null) {
                         
                                
                                params = line.split(",", 5); //split the line into the 3 parameters seperated by :
                                if (Float.parseFloat(params[2])== vr1) { //find the line we want to replace
                                        out.println(params[0] + "," + params[1] + "," + rate1.getText() + ","+ params[3] + "," + params[4]); //output the new line
                                } 
                                else if (Float.parseFloat(params[2])== vr2) { //find the line we want to replace
                                        out.println(params[0] + "," + params[1] + "," + rate2.getText() + ","+ params[3] + "," + params[4]); //output the new line
                                } 
                                else if (Float.parseFloat(params[2])== vr3) { //find the line we want to replace
                                        out.println(params[0] + "," + params[1] + "," + rate3.getText() + ","+ params[3] + "," + params[4]); //output the new line
                                } 
                                else {
                                        out.println(line); //if it's not the line, just output it as-is
                                }


                        }

                    in.close();
                    out.flush();
                    out.close();
                    File copy = file; 
                    if(file.exists())
                        file.delete();
                    temp.renameTo(copy);

                } catch (Exception e) {
                        e.printStackTrace();
                }


               
       }
        vr1 = Float.parseFloat(rate1.getText());
        vr2 = Float.parseFloat(rate2.getText());
        vr3 = Float.parseFloat(rate3.getText());
        

        try{
            BufferedWriter writer = new BufferedWriter(new FileWriter("Misc\\rates.txt"));
            writer.write(Float.toString(vr1));
            writer.newLine();
            writer.write(Float.toString(vr2));
            writer.newLine();
            writer.write(Float.toString(vr3));
            writer.close();
            
        }catch(IOException ioe){
            System.out.println(ioe);
        }
        ChangeRates.setVisible(false);
        ChangeRates.dispose();
        JOptionPane.showMessageDialog(null, "VAT Rates Changed!");
    }//GEN-LAST:event_jButton5ActionPerformed

    private void costCompActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_costCompActionPerformed
    
    File[] files = new File("Misc\\costs\\").listFiles();
    
    String[] fileStrings = new String[files.length];
 
    if(files.length>0){
        for(int i = 0; i< files.length; i++){
                if(files[i].toString().substring(11,files[i].toString().length()-15 ).equals(storeId)){
                    fileStrings[i] = files[i].toString().substring(11,files[i].toString().length()-4 ); 
            }
        }

        
        comparitor = (String)JOptionPane.showInputDialog(
                            null,
                            "Select a comparison file:",
                            "Select File",
                            JOptionPane.PLAIN_MESSAGE,
                            null,
                            fileStrings,
                            fileStrings[0]);

        //If a string was returned, say so.
    }else{
        JOptionPane.showMessageDialog(null, "No previous reports found");
        costComp.setSelected(false);
    }

    }//GEN-LAST:event_costCompActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        if(first.getText().length() == 6){
            try{
                Integer.parseInt(first.getText());
            }catch(NumberFormatException nfe){
                getToolkit().beep();
                first.requestFocus();
                first.selectAll();
                return; 
            }
        }else{
            JOptionPane.showMessageDialog(null, "First tag number must be 6 digits.");
            getToolkit().beep();
            first.requestFocus();
            first.selectAll();
            return;     
        }
        if(last.getText().length() == 6){
            try{
                Integer.parseInt(last.getText());
            }catch(NumberFormatException nfe){
                getToolkit().beep();
                last.requestFocus();
                last.selectAll();
                return; 
            }
        }else{
            JOptionPane.showMessageDialog(null, "Last tag number must be 6 digits.");
            getToolkit().beep();
            last.requestFocus();
            last.selectAll();
            return;     
        }
        firstT = Integer.parseInt(first.getText());
        lastT = Integer.parseInt(last.getText());
        if(firstT > lastT){
            JOptionPane.showMessageDialog(null, "Last tag must be higher in sequence.");
            first.requestFocus();
            first.selectAll();
            return; 
        }
        if(sequence.containing(firstT) || sequence.containing(lastT)){
            JOptionPane.showMessageDialog(null, "You can only add new tags. ");
            first.requestFocus();
            first.selectAll();
            return; 
        }
        
        Input.pack();
        Input.setVisible(true);
        tagNo.setText(first.getText());
        locationIn.setText("");
        deptIn.setText("");
        valueIn.setText("");
        clerkIn.setText("");
        adjIn.setText("0");
        
             
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        try{
        createPdf(); 
        System.out.println("printed");
        }catch(Exception e){
            e.printStackTrace();
        }
        proRep.setEnabled(true);
        File file = new File(newFileName);
        try{
            Desktop.getDesktop().open(file);
        }catch(IOException e){
            System.err.println("");
        }
        File f = new File("Misc\\Saved\\"+storeId+dateToString(stDate.getDate())+".tmp");
        
            sequence.writeToFile(f);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void saveFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveFileActionPerformed
        File file = new File("Misc\\Saved\\"+storeId+dateToString(stDate.getDate())+".tmp");
        
            sequence.writeToFile(file);
            JOptionPane.showMessageDialog(null, "Data saved");

    }//GEN-LAST:event_saveFileActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        ViewTags.pack();
        ViewTags.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) tagsTable.getModel();
        model.setRowCount(0);
        int start = Integer.parseInt(vfirst.getText());
        int end = Integer.parseInt(vlast.getText());
        if(!sequence.containing(start) || !sequence.containing(end)){
            JOptionPane.showMessageDialog(null, "You can only view tags that have been entered.");
            vfirst.requestFocus();
            vfirst.selectAll();
            return;
        }
        String sr = "S/F";
        String ver = "No";
        for(int i=start; i<=end; i++){
            if(sequence.returnTag(i).getStockRoom())
                sr = "S/R";
            if(sequence.returnTag(i).getVerified())
                ver = "Yes";
            Object[] data = {
                i,
                sr,
                sequence.returnTag(i).getLocation(),
                sequence.returnTag(i).getdepartment(),
                sequence.returnTag(i).getValue() + sequence.returnTag(i).getadjustment(),
                ver
            };
            model.addRow(data);
        }
    }//GEN-LAST:event_jButton7ActionPerformed
 

    private void exportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exportActionPerformed
 
        storeId = existingListCombo.getSelectedItem().toString(); 


        String fileName = new StringBuilder("Department Lists\\").append(existingListCombo.getSelectedItem().toString()).append(".txt").toString();

        try{
            BufferedReader br = new BufferedReader(new FileReader(fileName));
            storeLocationInfo = br.readLine(); 

	} catch (IOException e){
            System.out.println ("Error writing to file" + e.toString());
	}   
        for(int i=0;i<table.getRowCount();i++){
            DepartmentDetail temp = new DepartmentDetail(
                table.getValueAt(i, 1).toString(), Double.parseDouble(table.getValueAt(i, 2).toString()), 
                Double.parseDouble(table.getValueAt(i, 3).toString()),
                table.getValueAt(i, 4).toString()
            );
            liveListHash.put(Double.parseDouble(table.getValueAt(i, 0).toString()), temp);
            s.add(Integer.parseInt(table.getValueAt(i, 4).toString()));
            names.add(table.getValueAt(i, 1).toString());
            
        }
        
        createListPdf();
        String st = new StringBuilder("Exported Lists\\DL_")
                .append(storeId + ".pdf").toString();
        File file = new File(st);
        try{
            Desktop.getDesktop().open(file);
        }catch(IOException e){
            System.err.println("");
        }
    }//GEN-LAST:event_exportActionPerformed

    private void proRepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_proRepActionPerformed
        try{createProPdf();}catch(Exception e){JOptionPane.showMessageDialog(null, e);}
    }//GEN-LAST:event_proRepActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        Object[] options = {"Cancel",
                            "Continue"};
        int n = JOptionPane.showOptionDialog(null,
            "You will lose any unsaved data if you continue.",
            "Close Application",
            JOptionPane.YES_NO_OPTION,
            JOptionPane.QUESTION_MESSAGE,
            null,     //do not use a custom Icon
            options,  //the titles of buttons
            options[1]); //default button title
        if(n == 1){
            System.exit(0);
        }
    }//GEN-LAST:event_jButton9ActionPerformed
        int fixTagNumber; 
        int[] fixTagNumbers; 
        boolean multiple = false; 
    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        int n = tagsTable.getSelectedRowCount();
        String tag; 
        int[]rows; 
        String[] tags = new String[n]; 
        if(n == 1){
            fixValue.setEnabled(true);
            fixDept.setEnabled(true);
            multiple = false; 
            int row = tagsTable.getSelectedRow();
            tagFix.pack();
            tagFix.setVisible(true);
            tag = tagsTable.getValueAt(row, 0).toString();
            fixNo.setText(tag);
            int tagn = Integer.parseInt(tag);
            fixTagNumber = tagn; 
            if(sequence.getStockroom(sequence.returnIndex(tagn)))
                fixSR.setSelected(true);
            fixLocation.setText(sequence.getLocation(sequence.returnIndex(tagn)));
            fixDept.setText(Float.toString(sequence.getDepartment(sequence.returnIndex(tagn))));
            fixValue.setText(Integer.toString(sequence.getValue(sequence.returnIndex(tagn))
                    +sequence.getAdjustment(sequence.returnIndex(tagn))));      
            
            
        }
        else if (n > 1){
            multiple = true;
            fixSR.setSelected(false);
            fixLocation.setText("");
            fixDept.setText("");
            fixValue.setText("");
            rows = tagsTable.getSelectedRows();
            int[] tagints = new int[n]; 
            for(int i=0;i<n;i++){
                tags[i] = tagsTable.getValueAt(rows[i], 0).toString();
                tagints[i] = Integer.parseInt(tagsTable.getValueAt(rows[i], 0).toString());
            }
            fixTagNumbers = tagints; 
            tagFix.pack();
            tagFix.setVisible(true);
            fixValue.setEnabled(false);
            fixDept.setEnabled(false);
            fixNo.setText(tags[0] + " - " + tags[n-1]);
            
            
            
        }
        
    }//GEN-LAST:event_jButton10ActionPerformed

    private void fixDeptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixDeptActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fixDeptActionPerformed

    private void fixSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fixSaveActionPerformed
        if(!multiple && !liveListHash.containsKey(Double.parseDouble(fixDept.getText()))){
            JOptionPane.showMessageDialog(null, "Please enter a valid department");
            return; 
        }else{
            if(!multiple){
                try{
                    Integer.parseInt(fixValue.getText());
                }catch(NumberFormatException nfe){
                    JOptionPane.showMessageDialog(null, "Please enter a valid value");
                    return; 
                }
            }
            if(!multiple){
                
                int index = sequence.returnIndex(fixTagNumber);
                sequence.setStockroom(index, fixSR.isSelected());
                sequence.setAdjustment(index, 0);
                sequence.setDepartment(index, Float.parseFloat(fixDept.getText()));
                sequence.setValue(index, Integer.parseInt(fixValue.getText()));
                if(!fixLocation.getText().equals(""))
                    sequence.setLocation(index, fixLocation.getText());
            }else{
                for(int i=0; i<fixTagNumbers.length;i++){
                    int index = sequence.returnIndex(fixTagNumbers[i]);
                    sequence.setStockroom(index, fixSR.isSelected());
                    if(!fixLocation.getText().equals(""))
                        sequence.setLocation(index, fixLocation.getText());
                }
            }
            tagsTable.repaint();
            tagFix.dispose();
            ViewTags.dispose();
        ViewTags.pack();
        ViewTags.setVisible(true);
        DefaultTableModel model = (DefaultTableModel) tagsTable.getModel();
        model.setRowCount(0);
        int start = Integer.parseInt(vfirst.getText());
        int end = Integer.parseInt(vlast.getText());
        if(!sequence.containing(start) || !sequence.containing(end)){
            JOptionPane.showMessageDialog(null, "You can only view tags that have been entered.");
            vfirst.requestFocus();
            vfirst.selectAll();
            return;
        }
        String sr = "S/F";
        String ver = "No";
        for(int i=start; i<=end; i++){
            if(sequence.returnTag(i).getStockRoom())
                sr = "S/R";
            if(sequence.returnTag(i).getVerified())
                ver = "Yes";
            Object[] data = {
                i,
                sr,
                sequence.returnTag(i).getLocation(),
                sequence.returnTag(i).getdepartment(),
                sequence.returnTag(i).getValue() + sequence.returnTag(i).getadjustment(),
                ver
            };
            model.addRow(data);
        }
            
        }
    }//GEN-LAST:event_fixSaveActionPerformed

    private void deptInFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_deptInFocusGained
        deptIn.selectAll();
    }//GEN-LAST:event_deptInFocusGained

    private void valueInFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_valueInFocusGained
        valueIn.selectAll();
    }//GEN-LAST:event_valueInFocusGained

    private void adjVInFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_adjVInFocusGained
        adjVIn.selectAll();
    }//GEN-LAST:event_adjVInFocusGained

    private void p2DeptFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_p2DeptFocusGained
        p2Dept.selectAll();
    }//GEN-LAST:event_p2DeptFocusGained

    private void p2TotalFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_p2TotalFocusGained
        p2Total.selectAll();
    }//GEN-LAST:event_p2TotalFocusGained

    private void newListNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newListNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_newListNameActionPerformed
        private String[] processLine(String line, String old, String newS) {
            String [] cells = line.split(","); // note this is not sufficient for correct csv parsing.
            
                if (cells[2].equals(old)) {
                   cells[2] = newS;
                }
                
            

            return cells;
        }
    int p2Index = 1; 
    private String[] getDeptNames(){
        File folder = new File("Department Lists");
        File[] listOfFiles = folder.listFiles();
        String[] deptNames = new String[listOfFiles.length];
        for(int i=0; i<deptNames.length; i++){
            String name = listOfFiles[i].getName();
            name = name.substring(0, name.length()-4);
            deptNames[i] = name;
        }
        return deptNames; 
    }

    public static String capitalise(String str) 
    {
        boolean prevWasWhiteSp = true;
        char[] chars = str.toCharArray();
        for (int i = 0; i < chars.length; i++) {
           if (Character.isLetter(chars[i])) {
               if (prevWasWhiteSp) {
                   chars[i] = Character.toUpperCase(chars[i]);    
               }
              prevWasWhiteSp = false;
          } else {
               prevWasWhiteSp = Character.isWhitespace(chars[i]);
            }
        }
        return new String(chars);
    }
    public Object[][] getTableData(JTable aTable){
        DefaultTableModel dtm = (DefaultTableModel)aTable.getModel();
        int rows = dtm.getRowCount();
        int cols = dtm.getColumnCount();
        Object[][] tableData = new Object[rows][cols];
        for(int i=0;i<rows;i++){
            for(int j=0;j<cols;j++){
                tableData[i][j] = dtm.getValueAt(i, j);
            }
        }
        return tableData; 
        
        
    }
    public boolean checkIfNumber(String in) {
        try {
            Double.parseDouble(in);
        } catch (NumberFormatException ex) {
        return false;
        }
        return true;
    }
    public boolean hasText(String text){
        if (text.equals(""))
                return false;
        else
            return true; 
    }
    public boolean isDeptUnique(String stringIn){
        Double deptNo = Double.parseDouble(stringIn);
        int rowCount = table.getRowCount();
        for(int i=0;i<rowCount;i++){
            Double thisNo = Double.parseDouble(table.getValueAt(i, 0).toString());
            if(thisNo.equals(deptNo)){
                return false;        
            }
        }
        return true; 
    }
    public boolean isTableComplete(){

        Object[][] tableData = getTableData(table);
        for(int i=0;i<tableData.length;i++){
            
            for(int j=0;j<5;j++){
                boolean toggle = false; boolean extend = false; 
                if (tableData[i][j] == null)


                    return false; 
            }
        }
        return true; 
    }
    public double decimalPlaces(double number){
    /*
     * A method that takes a double and rounds to 6 decimal places 
     * and returns as a string. 
     */

            DecimalFormat df = new DecimalFormat("#.##");
            return Double.parseDouble(df.format(number));

    }
    /*
     * A method with sets all componants on a panel to enabled or disabled. 
     * Takes two arguments - the panel and a boolean (true for enable, false for 
     * disable. 
     */
    public void panelEnable(JPanel panel, Boolean enable){
        Component[] com = panel.getComponents(); 
        if(!enable){
            for (int a = 0; a < com.length; a++) {  
                 com[a].setEnabled(false);  
            }  
        }
        else{
            for (int a = 0; a < com.length; a++) {  
                 com[a].setEnabled(true);  
            }             
        }
        
   
}
    public String dateToString(Date date){
             SimpleDateFormat ddMMMMyyFormat = new SimpleDateFormat("dd-MMMM-yy");
             return ddMMMMyyFormat.format(date);
            

    }
        public String dateToString2(Date date){
             SimpleDateFormat ddmmyyFormat = new SimpleDateFormat("dd_MM_yy");
             return ddmmyyFormat.format(date);
            

    }
    
    public String returnDeptName(double deptCode){
            String s = ""; 
            Enumeration<Double> enumKey = liveListHash.keys();
            while(enumKey.hasMoreElements()) {
                Double key = enumKey.nextElement();
                if(key == deptCode){
                    DepartmentDetail temp = (DepartmentDetail) liveListHash.get(key);
                    s = temp.getName(); 
                }
            }
            return s; 
   }
    public float returnVat(double deptCode){
       DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
       float f = 0; 
       for(int i=0; i<tm.getRowCount(); i++){
           if(tm.getValueAt(i, 0).equals(deptCode)){
               System.out.println(tm.getValueAt(i, 2));
               f =  (float)tm.getValueAt(i, 2);
           }
       }
       return f; 
    }
    public double returnMargin(double deptCode){
       DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
       double d = 0; 
       for(int i=0; i<tm.getRowCount(); i++){
           if(tm.getValueAt(i, 0).equals(deptCode)){
               System.out.println(tm.getValueAt(i, 3));
               d =  (double) tm.getValueAt(i, 3);
           }
       }
       return d; 
    }
    public float returnRate(double deptCode){
        DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
        float d = 0; 
       for(int i=0; i<tm.getRowCount(); i++){
           if(tm.getValueAt(i, 0).equals(deptCode)){
               d =  (float) tm.getValueAt(i, 2);
           }
       }
       return d; 
    }
    public TreeMap<Double, String> articleToDeptHash(){
        TreeMap<Double, String> hash = new TreeMap<Double, String>(); 
            Enumeration<Double> enumKey = liveListHash.keys();
            while(enumKey.hasMoreElements()) {
                Double key = enumKey.nextElement();
                DepartmentDetail temp = (DepartmentDetail) liveListHash.get(key);
                String val = (String) temp.getArticle();
                hash.put(key, val); 
            }
            
            return hash;
    }
    public boolean checkRates(float toCheck){
        if(toCheck == rates[0]){
            return true;
        }else if(toCheck == rates[1]){
            return true; 
        }else if(toCheck == rates[2]){
            return true; 
        }else if(toCheck == rates[3]){
            return true; 
        }else{
            return false; 
        }
    }
    public float[] getRates(){
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
        TreeSet<Float> ts = new TreeSet<Float>();
        
        for(int i=0; i<dtm.getRowCount(); i++){
            ts.add((float)dtm.getValueAt(i, 2));
            
        }
        ts.size();
        float[] f = new float[ts.size()]; 
        for(int i=0; i<ts.size(); i++){
            f[i] = ts.pollFirst();
        }
        return f; 
    }
    public boolean checkMargins(){
        DefaultTableModel dtm = (DefaultTableModel) table.getModel();
            for(int i=0; i<dtm.getRowCount(); i++){
                if(!((double)dtm.getValueAt(i, 3) == 0.0)){
                    return false; 
                }
            }
            return true; 
    }
      

    public TreeSet<String> uniqueGroups(){
        
        TreeSet<String> ts = new TreeSet<String>(); 
        for(int i=0; i<sequence.length();i++){
            TreeMap hash = articleToDeptHash(); 
            try{
                ts.add((String)hash.get(Double.parseDouble(Float.toString(sequence.getDepartment(i)))));
            }catch(NullPointerException np){
                    JTextField field1 = new JTextField();
                    field1.setText(Float.toString(sequence.getDepartment(i)));
                    JTextField field2 = new JTextField();  
                    JTextField field3 = new JTextField();  
                    JTextField field4 = new JTextField();  
                    JTextField field5 = new JTextField();  
                    Object[] message = {  
                        "Dept No:", field1,  
                        "Dept Name:", field2,  
                        "VAT Rate:", field3,  
                        "Margin:", field4,  
                        "Art Grp:", field5,  
                    };  
                    int option = JOptionPane.showConfirmDialog(null, message, "Department not found", JOptionPane.OK_CANCEL_OPTION);
                    while(field2.getText().equals("") || !checkIfNumber(field3.getText()) || 
                            !checkIfNumber(field4.getText()) || !checkIfNumber(field3.getText())){
                        JOptionPane.showMessageDialog(null, "Invalid Entry");
                        option = JOptionPane.showConfirmDialog(null, message, "Enter all your values", JOptionPane.OK_CANCEL_OPTION);

                    }

                    DepartmentDetail temp = new DepartmentDetail(
                        field2.getText(), Double.parseDouble(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        field5.getText()
                    );
                    liveListHash.put(Double.parseDouble(field1.getText()), temp);
                    DefaultTableModel tm = (DefaultTableModel) table.getModel(); 
                    Object[] row = {
                        Double.parseDouble(field1.getText()),
                        field2.getText(), Float.parseFloat(field3.getText()), 
                        Double.parseDouble(field4.getText()),
                        Integer.parseInt(field5.getText())
                    }; 
                    tm.addRow(row); 
                    hash = articleToDeptHash(); 
                    ts.add((String)hash.get(Double.parseDouble(Float.toString(sequence.getDepartment(i)))));
            }
        }
        return ts; 
    }
    
    class Footer extends PdfPageEventHelper{
        int pageNumber; 
        com.itextpdf.text.Font font3 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 9, Font.PLAIN);
            com.itextpdf.text.Font font1 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.BOLD);
            com.itextpdf.text.Font font2 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.PLAIN);
        public void onChapter(PdfWriter writer, Document document) {
            pageNumber = 1; 
        }
        public void onStartPage(PdfWriter writer, Document document) {        
            pageNumber++;
        }        
        String header; 
        int topLine = 0; 
        int secondLine = -14; 
        public void onEndPage(PdfWriter writer, Document document) {    
            if(pageNumber>1){
                topLine = 42; 
                secondLine = 28; 
            }
            if(pageNumber == 1){
                topLine = 0; 
                secondLine = -14; 
            }
                
            Rectangle rect = writer.getBoxSize("art");
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_LEFT, new Phrase("Report Date: " + dateToString(new Date()), font2),
                 rect.getLeft(), rect.getTop()+topLine, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_CENTER, new Phrase(storeId, font1),
                ( (rect.getRight()-rect.getLeft())/2)+40, rect.getTop()+topLine, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_RIGHT, new Phrase(header, font1),
                 rect.getRight(), rect.getTop()+topLine, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_LEFT, new Phrase("Stocktake Date: " + dateToString(stDate.getDate()), font2),
                 rect.getLeft(), rect.getTop()+secondLine, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_CENTER, new Phrase(storeLocationInfo, font1),
                 ((rect.getRight()-rect.getLeft())/2)+40, rect.getTop()+secondLine, 0);

            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_LEFT, new Phrase("We certify these results as true and accurate to the best of our ability.", font3),
                 rect.getLeft(), rect.getBottom()-30, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_LEFT, new Phrase("Signed  .......................................................................   Take Stock. (01) 775 5242", font3),
                 rect.getLeft(), rect.getBottom()-47, 0);
            ColumnText.showTextAligned(writer.getDirectContent(),
            Element.ALIGN_RIGHT, new Phrase(String.format("Page %d", pageNumber), font3),
                 rect.getRight()-16, rect.getBottom() - 47, 0);
        }

    }
    class Watermark extends PdfPageEventHelper {
        
	/** The PdfTemplate that contains the total number of pages. */
	protected PdfTemplate total;

	/** The font that will be used. */
	protected BaseFont helv;

	/** The Graphics State for the watermark. */
	protected PdfGState gstate;

	/** The color of the text watermark. */
	protected Color color;

	/** The Image used as watermark. */
	protected Image image;
 
        com.itextpdf.text.Font FONT = new com.itextpdf.text.Font(FontFamily.HELVETICA, 52, Font.BOLD, new GrayColor(0.75f));
 
        public void onEndPage(PdfWriter writer, Document document) {
            total = writer.getDirectContent().createTemplate(100, 100);
            total.setBoundingBox(new com.itextpdf.text.Rectangle(-20, -20, 100, 100));
            try {
                    helv = BaseFont.createFont(BaseFont.HELVETICA, BaseFont.WINANSI,
                                    BaseFont.NOT_EMBEDDED);
                    image = Image
                                    .getInstance("Misc\\ts_logo.png");

            } catch (Exception e) {
                    throw new ExceptionConverter(e);
            }
            gstate = new PdfGState();
            gstate.setFillOpacity(0.15f);
            gstate.setStrokeOpacity(0.15f);
		try {
			PdfContentByte contentunder = writer.getDirectContentUnder();
			contentunder.saveState();
			contentunder.setGState(gstate);
                        
			contentunder.addImage(image, image.getWidth(), 0, 0, image
					.getHeight(), 80, 400);
                        image.setRotationDegrees(45.0f);
			contentunder.restoreState();
		} catch (DocumentException e) {
			e.printStackTrace();
		}
        }
    }



public void createPdf(){
    if(!checkMargins()){   
        
        TreeSet<String> artGroups = uniqueGroups(); 
        Document document = new Document(PageSize.A4);
        //namesToHash(); 
        
        File theDir = new File("Reports\\"+storeId);

          // if the directory does not exist, create it
          if (!theDir.exists()) {
            
            boolean result = theDir.mkdir();  


          }
        
        
        newFileName = new StringBuilder("Reports\\")
                .append(storeId + "\\").append(storeId + "_" + dateToString2(stDate.getDate())  ).toString();
        //fileDisplayName = new StringBuilder(storeId + "_" + dateToString2(stDate.getDate())).append(".pdf" ).toString();
        File f = new File(newFileName+".pdf");
        if(f.exists()){
            int count = 1; 
            while(true){
                if(!(new File(newFileName+"("+Integer.toString(count)+").pdf").exists())){
                   newFileName = new StringBuilder(newFileName).append("("+Integer.toString(count)+").pdf").toString();
                   break; 
                }
                count++;
            }
        }else{
            newFileName = new StringBuilder(newFileName).append(".pdf").toString();
        }
        try{
            writer = PdfWriter.getInstance(document,
                    new FileOutputStream(newFileName));
     
            
        writer.setBoxSize("art", new com.itextpdf.text.Rectangle(36, 54, 559, 788));
        writer.setPageEvent(new Watermark());
        Footer footer = new Footer(); 
        footer.header = "Location Report";
        writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
        writer.setPageEvent(footer);
            
            document.open();
            com.itextpdf.text.Font font1 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 14, Font.BOLD);
            com.itextpdf.text.Font font2 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.BOLD);
            com.itextpdf.text.Font font3 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.PLAIN);

            
            
            Image image = Image.getInstance("Misc\\ts_logo.png");
            
            image.scaleAbsoluteWidth(145);
            image.scaleAbsoluteHeight(35);
            image.setAbsolutePosition(36, 730);
            

            
            PdfPTable headTable = new PdfPTable(3);
            headTable.setWidthPercentage(100);

            PdfPCell def  = headTable.getDefaultCell(); 
            def.setBorder(PdfPCell.NO_BORDER);
            
            PdfPCell c = new PdfPCell(new Phrase(" ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase(" ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase(" ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable.addCell(c);         
            c = new PdfPCell(new Phrase("\nTake Stock", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c); 
            c = new PdfPCell(new Phrase(" ", font3)); 
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase(" ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable.addCell(c);             
            c = new PdfPCell(new Phrase("5 Clare Street, Dublin 2 \n\n www.wecount.ie", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c);          
            
            
            PdfPTable pdfTable = new PdfPTable(5);
            pdfTable.setWidthPercentage(80);
            PdfPCell defaultCell = pdfTable.getDefaultCell();
            defaultCell.setBorder(PdfPCell.NO_BORDER);
            pdfTable.setSpacingBefore(20f);
            pdfTable.setSpacingAfter(20f);   
            float[] columnWidths = {1f, 3f, 3f, 1f, 1f};
            pdfTable.setWidths(columnWidths);
           
            PdfPCell c1 = new PdfPCell(new Phrase("Tag", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Location", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
          
            c1 = new PdfPCell(new Phrase("Description", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Dept.", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Value", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            int atIndex = 0; 
            int combValue =0; 
            for(int i=0;i<=sequence.length();i++){
                
                    if(i>0){
                        if(i==sequence.length()){
                            c1 = new PdfPCell(new Phrase("Subtotal:", font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            c1 = new PdfPCell(new Phrase(Integer.toString(combValue), font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            break; 
                        }
                        if(!sequence.getLocation(i).equals(sequence.getLocation(i-1))){
                            c1 = new PdfPCell(new Phrase("Subtotal:", font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            c1 = new PdfPCell(new Phrase(Integer.toString(combValue), font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            combValue = 0; 

                        }
                    }


                    c1 = new PdfPCell(new Phrase(Integer.toString(sequence.getTagNumber(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    System.out.println("x");
                    
                    c1 = new PdfPCell(new Phrase(capitalise(sequence.getLocation(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(returnDeptName(Double.parseDouble(Float.toString(sequence.getDepartment(i)))), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(Float.toString(sequence.getDepartment(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(Integer.toString(sequence.getValue(i)+sequence.getAdjustment(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable.addCell(c1);
                    
                    combValue += sequence.getValue(i)+sequence.getAdjustment(i); 
                    
                    

                }
                int lrTotal=0; 
                for(int i=0;i<sequence.length();i++){
                    lrTotal += sequence.getValue(i)+sequence.getAdjustment(i);
                }
                c1 = new PdfPCell(new Phrase("Total:", font2));
                c1.setColspan(4);
                c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable.addCell(c1);
                c1 = new PdfPCell(new Phrase(Integer.toString(lrTotal), font2));
                c1.setColspan(4);
                c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable.addCell(c1);
            
            //Paragraph heading2 = new Paragraph("Retail To Cost Summary", font1); 
            //heading2.setAlignment(Element.ALIGN_CENTER);
            

            PdfPTable headTable2 = new PdfPTable(3);
            headTable2.setWidthPercentage(100);

            def  = headTable2.getDefaultCell(); 
            def.setBorder(PdfPCell.NO_BORDER);
            
            c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase( "  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable2.addCell(c);         
            c = new PdfPCell(new Phrase("\nTake Stock", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c); 
            c = new PdfPCell(new Phrase(" ", font3)); 
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase(" ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable2.addCell(c);             
            c = new PdfPCell(new Phrase("5 Clare Street, Dublin 2 \n\n www.wecount.ie", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c);     
                
                PdfPTable pdfTable2 = new PdfPTable(7);
                pdfTable2.setWidthPercentage(100);
                pdfTable2.setSpacingBefore(20f);
                pdfTable2.setSpacingAfter(20f);   
                float[] columnWidths2 = { 2.5f, 1f, 1f, 1f, 1f, 1f, 1f};
                pdfTable2.setWidths(columnWidths2);
            if(costComp.isSelected()) {
                pdfTable2 = new PdfPTable(8);
                pdfTable2.setWidthPercentage(100);
                pdfTable2.setSpacingBefore(20f);
                pdfTable2.setSpacingAfter(20f);   
                float[] columnWidths3 = { 2.5f, 1f, 1f, 1f, 1f, 1f, 1f, 1f};
                pdfTable2.setWidths(columnWidths3);
             }
            
                
                int runSF = 0;
                int runSR = 0;
                int runRet =0;
                int runLV =0;
                int runCost = 0; 
                int runComp = 0; 
                int vr0 = 0; 
                int vr1 = 0; 
                int vr2 = 0; 
                int vr3 = 0; 
                while(!artGroups.isEmpty()){
                    
                    String group = artGroups.pollFirst();
                    TreeMap hash = articleToDeptHash(); 
                    

                    c1 = new PdfPCell(new Phrase("Article Group: " + capitalise(group) , font2));
                    c1.setColspan(7);
                    if(costComp.isSelected())
                        c1.setColspan(8);
                    c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
                    pdfTable2.addCell(c1);
                    
                    PdfPCell c2 = new PdfPCell(new Phrase("Department", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);


                    c2 = new PdfPCell(new Phrase("S/F", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("S/R", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("Total(R)", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("Less VAT", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("Cost", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);
                    
                    c2 = new PdfPCell(new Phrase("Margin %", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);
                    
                    if(costComp.isSelected()){
                        c2 = new PdfPCell(new Phrase("Previous", font2));
                        c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                        c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                        pdfTable2.addCell(c2);
                    }
                    
                    readInCompInfo();
                    
                    Iterator<Double> it = hash.keySet().iterator(); 
                    int subSF = 0;
                    int subSR = 0; 
                    int subRet =0;
                    int subLV =0;
                    int subCost =0;
                    int subComp = 0; 
                    while(it.hasNext()){
 
                        double key = it.next();
                        String value = (String) hash.get(key);
                        if (value == group){
                            int running =0; 
                            int sr = 0; 
                            int sf = 0; 
                            for(int i=0; i<sequence.length(); i++){
                                if((Double.parseDouble(Float.toString(sequence.getDepartment(i))))== key){
                                    running += sequence.getValue(i) + sequence.getAdjustment(i);
                                    if(sequence.getStockroom(i)){
                                        sr += sequence.getValue(i) + sequence.getAdjustment(i);
                                    }else{
                                        sf += sequence.getValue(i) + sequence.getAdjustment(i);
                                    }
                                }
                            }
                        if(running != 0){


                            c2 = new PdfPCell(new Phrase(returnDeptName(key), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_LEFT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(sf), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(sr), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(running), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);     
                            
                            System.out.println("Vat: " + returnVat(key));
                            float lessV = ((float) running / (((returnVat(key))/100)+1));
                            Math.round(lessV);
                            int iLessV = (int) lessV; 
                            c2 = new PdfPCell(new Phrase(Integer.toString(iLessV), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);      
                            
                      
                            int cost = (int)(lessV - ((returnMargin(key)*lessV)/100));
                            comparisonInfo.put(key, cost);
                             
                            if(returnRate(key) == rates[0]){
                                vr0 += cost; 
                            }else if(returnRate(key) == rates[1]){
                                vr1 += cost; 
                            }else if(returnRate(key) == rates[2]){
                                vr2 += cost; 
                            }else if(returnRate(key) == rates[3]){
                                vr3 += cost; 
                            }
                            c2 = new PdfPCell(new Phrase(Integer.toString(cost), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);   
                            
                            c2 = new PdfPCell(new Phrase(Double.toString(returnMargin(key)), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2); 
                            
                            if(costComp.isSelected()){
                                try{
                                    c2 = new PdfPCell(new Phrase(Integer.toString((int)comparison.get(key)), font3));
                                    c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                                    pdfTable2.addCell(c2); 
                                }catch(NullPointerException npe){
                                    c2 = new PdfPCell(new Phrase(" ", font3));
                                    c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                                    pdfTable2.addCell(c2);
                                }
                            }
                            
                            subSF += sf;
                            subSR += sr;
                            subRet += running;
                            subLV += iLessV;
                            subCost += cost;
                            try{
                                subComp += (int)comparison.get(key); 
                            }catch(NullPointerException npe){
                                subComp += 0; 
                            }
                        }
                      }
                    
                        
                    }
                if(subRet > 0){
                    c1 = new PdfPCell(new Phrase("Group " + group + " Subtotal:", font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subSF), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subSR), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subRet), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subLV), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subCost), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase("  ", font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    
                    if(costComp.isSelected()){
                        c1 = new PdfPCell(new Phrase(Integer.toString(subComp), font2));
                        c1.setColspan(1);
                        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                        pdfTable2.addCell(c1);
                    }
                    
                   
                    c1 = new PdfPCell(new Phrase("    " , font2));
                    c1.setColspan(7);
                    if(costComp.isSelected())
                        c1.setColspan(8);
                    c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
                    pdfTable2.addCell(c1);
                    
                }
                runSF += subSF;
                runSR += subSR;
                runRet += subRet;
                runLV += subLV;
                runCost += subCost; 
                runComp += subComp; 
            }
            c1 = new PdfPCell(new Phrase("Total" , font2));
            c1.setColspan(7);
            if(costComp.isSelected())
                c1.setColspan(8);
            c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
            pdfTable2.addCell(c1);
            
            PdfPCell c2 = new PdfPCell(new Phrase("   ", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);


            c2 = new PdfPCell(new Phrase("S/F", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("S/R", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("Total(R)", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("Less VAT", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("Cost", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
            
            c2 = new PdfPCell(new Phrase("  ", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
            
            if(costComp.isSelected()){
                c2 = new PdfPCell(new Phrase("Previous", font2));
                c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable2.addCell(c2);
            }
            
            
            c2 = new PdfPCell(new Phrase("Total", font2));
            c2.setHorizontalAlignment(Element.ALIGN_LEFT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
            
            c2 = new PdfPCell(new Phrase(Integer.toString(runSF), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
             c2 = new PdfPCell(new Phrase(Integer.toString(runSR), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);     
             c2 = new PdfPCell(new Phrase(Integer.toString(runRet), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2); 
             c2 = new PdfPCell(new Phrase(Integer.toString(runLV), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);             
            c2 = new PdfPCell(new Phrase(Integer.toString(runCost), font2));
            total = runRet; 
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2); 
             c2 = new PdfPCell(new Phrase(" ", font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
            
            if(costComp.isSelected()){
                c2 = new PdfPCell(new Phrase(Integer.toString(runComp), font2));
                c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable2.addCell(c2); 
            }
            
            
            PdfPTable pdfTable3 = new PdfPTable(2);
            pdfTable3.setWidthPercentage(30);
            pdfTable3.setSpacingBefore(20f);
            pdfTable3.setSpacingAfter(20f);   
            pdfTable3.setHorizontalAlignment(Element.ALIGN_RIGHT);

            PdfPCell c3 = new PdfPCell(new Phrase("VAT Rate", font2));
            c3.setHorizontalAlignment(Element.ALIGN_CENTER);
            c3.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable3.addCell(c3);
            
            c3 = new PdfPCell(new Phrase("Total", font2));
            c3.setHorizontalAlignment(Element.ALIGN_CENTER);
            c3.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable3.addCell(c3);
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[3]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3); 
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr3), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);   
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[0]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr0), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  

            c3 = new PdfPCell(new Phrase(Float.toString(rates[1]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);                  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr1), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);   
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[2]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr2), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3); 




            document.add(headTable);
            document.add(image); 
            document.add(pdfTable);
            
            document.newPage();
            footer.pageNumber = 1; 
            footer.header = "Retail to Cost Summary";
            document.add(headTable2);
            document.add(image); 
            document.add(pdfTable2);
            document.add(pdfTable3);
            document.close();
            addToCompInfo();

 
        }catch(Exception e){
            e.printStackTrace();
        } 
    }else{
        TreeSet<String> artGroups = uniqueGroups(); 
        Document document = new Document(PageSize.A4);
        //namesToHash(); 
        
        File theDir = new File("Reports\\"+storeId);

          // if the directory does not exist, create it
          if (!theDir.exists()) {
            
            boolean result = theDir.mkdir();  


          }        

        newFileName = new StringBuilder("Reports\\")
                .append(storeId + "\\").append(storeId + "_" + dateToString2(stDate.getDate())  ).toString();
        //fileDisplayName = new StringBuilder(storeId + "_" + dateToString2(stDate.getDate())).append(".pdf" ).toString();
        File f = new File(newFileName+".pdf");
        if(f.exists()){
            int count = 1; 
            while(true){
                if(!(new File(newFileName+"("+Integer.toString(count)+").pdf").exists())){
                   newFileName = new StringBuilder(newFileName).append("("+Integer.toString(count)+").pdf").toString();
                   break; 
                }
                count++;
            }
        }else{
            newFileName = new StringBuilder(newFileName).append(".pdf").toString();
        }
        try{
            PdfWriter writer = PdfWriter.getInstance(document,
                    new FileOutputStream(newFileName));
     
            
     
            writer.setBoxSize("art", new com.itextpdf.text.Rectangle(36, 54, 559, 788));
            writer.setPageEvent(new Watermark());
            Footer footer = new Footer(); 
            footer.header = "Location Report"; 
            writer.setBoxSize("art", new Rectangle(36, 54, 559, 788));
            writer.setPageEvent(footer);
            
            document.open();
            com.itextpdf.text.Font font1 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 14, Font.BOLD);
            com.itextpdf.text.Font font2 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.BOLD);
            com.itextpdf.text.Font font3 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.PLAIN);

            
            Image image = Image.getInstance("Misc\\ts_logo.png");
            
            image.scaleAbsoluteWidth(145);
            image.scaleAbsoluteHeight(35);
            image.setAbsolutePosition(36, 730);
            

            
            PdfPTable headTable = new PdfPTable(3);
            headTable.setWidthPercentage(100);

            PdfPCell def  = headTable.getDefaultCell(); 
            def.setBorder(PdfPCell.NO_BORDER);
            
            PdfPCell c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase(" ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable.addCell(c);         
            c = new PdfPCell(new Phrase("\nTake Stock", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c); 
            c = new PdfPCell(new Phrase(" ", font3)); 
            c.setBorder(PdfPCell.NO_BORDER);
            headTable.addCell(c);
            c = new PdfPCell(new Phrase(" ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable.addCell(c);             
            c = new PdfPCell(new Phrase("5 Clare Street, Dublin 2 \n\n www.wecount.ie", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable.addCell(c);                      
            
            PdfPTable pdfTable = new PdfPTable(5);
            pdfTable.setWidthPercentage(80);
            PdfPCell defaultCell = pdfTable.getDefaultCell();
            defaultCell.setBorder(PdfPCell.NO_BORDER);
            pdfTable.setSpacingBefore(20f);
            pdfTable.setSpacingAfter(20f);   
            float[] columnWidths = {1f, 3f, 3f, 1f, 1f};
            pdfTable.setWidths(columnWidths);
           
            PdfPCell c1 = new PdfPCell(new Phrase("Tag", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Location", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
          
            c1 = new PdfPCell(new Phrase("Description", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Dept.", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Value", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            int atIndex = 0; 
            int combValue =0; 
            for(int i=0;i<=sequence.length();i++){
                
                    if(i>0){
                        if(i==sequence.length()){
                            c1 = new PdfPCell(new Phrase("Subtotal:", font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            c1 = new PdfPCell(new Phrase(Integer.toString(combValue), font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            break; 
                        }
                        if(!sequence.getLocation(i).equals(sequence.getLocation(i-1))){
                            c1 = new PdfPCell(new Phrase("Subtotal:", font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            c1 = new PdfPCell(new Phrase(Integer.toString(combValue), font2));
                            c1.setColspan(4);
                            c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                            pdfTable.addCell(c1);
                            combValue = 0; 

                        }
                    }


                    c1 = new PdfPCell(new Phrase(Integer.toString(sequence.getTagNumber(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    System.out.println("x");
                    
                    c1 = new PdfPCell(new Phrase(capitalise(sequence.getLocation(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(returnDeptName(Double.parseDouble(Float.toString(sequence.getDepartment(i)))), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(Float.toString(sequence.getDepartment(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable.addCell(c1);
                    
                    c1 = new PdfPCell(new Phrase(Integer.toString(sequence.getValue(i)+sequence.getAdjustment(i)), font3));
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable.addCell(c1);
                    
                    combValue += sequence.getValue(i)+sequence.getAdjustment(i); 
                    
                    

                }
                int lrTotal=0; 
                for(int i=0;i<sequence.length();i++){
                    lrTotal += sequence.getValue(i)+sequence.getAdjustment(i);
                }
                c1 = new PdfPCell(new Phrase("Total:", font2));
                c1.setColspan(4);
                c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable.addCell(c1);
                c1 = new PdfPCell(new Phrase(Integer.toString(lrTotal), font2));
                c1.setColspan(4);
                c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable.addCell(c1);
            
            PdfPTable headTable2 = new PdfPTable(3);
            headTable2.setWidthPercentage(100);

            def  = headTable2.getDefaultCell(); 
            def.setBorder(PdfPCell.NO_BORDER);
            
            c = new PdfPCell(new Phrase("  ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("   ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase("  ", font2));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable2.addCell(c);         
            c = new PdfPCell(new Phrase("\nTake Stock", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c); 
            c = new PdfPCell(new Phrase(" ", font3)); 
            c.setBorder(PdfPCell.NO_BORDER);
            headTable2.addCell(c);
            c = new PdfPCell(new Phrase(" ", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_CENTER);
            headTable2.addCell(c);             
            c = new PdfPCell(new Phrase("5 Clare Street, Dublin 2 \n\n www.wecount.ie", font3));
            c.setBorder(PdfPCell.NO_BORDER);
            c.setHorizontalAlignment(Element.ALIGN_RIGHT);
            headTable2.addCell(c);     
            
   
                PdfPTable pdfTable2 = new PdfPTable(5);
                pdfTable2.setWidthPercentage(100);
                pdfTable2.setSpacingBefore(20f);
                pdfTable2.setSpacingAfter(20f);   
                float[] columnWidths2 = { 2.5f, 1f, 1f, 1f, 1f};
                pdfTable2.setWidths(columnWidths2);
            if(costComp.isSelected()) {
                pdfTable2 = new PdfPTable(6);
                pdfTable2.setWidthPercentage(100);
                pdfTable2.setSpacingBefore(20f);
                pdfTable2.setSpacingAfter(20f);   
                float[] columnWidths3 = { 2.5f, 1f, 1f, 1f, 1f, 1f};
                pdfTable2.setWidths(columnWidths3);
             }
            
                
                int runSF = 0;
                int runSR = 0;
                int runRet =0;
                int runLV =0;
                int runCost = 0; 
                int runComp = 0; 
                int vr0 = 0; 
                int vr1 = 0; 
                int vr2 = 0; 
                int vr3 = 0; 
                while(!artGroups.isEmpty()){
                    
                    String group = artGroups.pollFirst();
                    TreeMap hash = articleToDeptHash(); 
                    

                    c1 = new PdfPCell(new Phrase("Article Group: " + capitalise(group) , font2));
                    c1.setColspan(5);
                    if(costComp.isSelected())
                        c1.setColspan(6);
                    c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
                    pdfTable2.addCell(c1);
                    
                    PdfPCell c2 = new PdfPCell(new Phrase("Department", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);


                    c2 = new PdfPCell(new Phrase("S/F", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("S/R", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("Total(R)", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);

                    c2 = new PdfPCell(new Phrase("Less VAT", font2));
                    c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                    c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c2);


                    
                    if(costComp.isSelected()){
                        c2 = new PdfPCell(new Phrase("Previous(C)", font2));
                        c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                        c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                        pdfTable2.addCell(c2);
                    }
                    
                    readInCompInfo();
                    
                    Iterator<Double> it = hash.keySet().iterator();
                    int subSF = 0;
                    int subSR = 0; 
                    int subRet =0;
                    int subLV =0;
                    int subCost =0;
                    int subComp = 0; 
                    while(it.hasNext()){
 
                        double key = it.next();
                        String value = (String) hash.get(key);
                        if (value == group){
                            int running =0; 
                            int sr = 0; 
                            int sf = 0; 
                            for(int i=0; i<sequence.length(); i++){
                                if((Double.parseDouble(Float.toString(sequence.getDepartment(i))))== key){
                                    running += sequence.getValue(i) + sequence.getAdjustment(i);
                                    if(sequence.getStockroom(i)){
                                        sr += sequence.getValue(i) + sequence.getAdjustment(i);
                                    }else{
                                        sf += sequence.getValue(i) + sequence.getAdjustment(i);
                                    }
                                }
                            }
                        if(running != 0){


                            c2 = new PdfPCell(new Phrase(returnDeptName(key), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_LEFT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(sf), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(sr), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);

                            c2 = new PdfPCell(new Phrase(Integer.toString(running), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);     
                            
                            System.out.println("Vat: " + returnVat(key));
                            float lessV = ((float) running / (((returnVat(key))/100)+1));
                            Math.round(lessV);
                            int iLessV = (int) lessV; 
                            c2 = new PdfPCell(new Phrase(Integer.toString(iLessV), font3));
                            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                            pdfTable2.addCell(c2);      
                            
                      
                            int cost = (int)(lessV - ((returnMargin(key)*lessV)/100));
                            comparisonInfo.put(key, cost);
                             
                            if(returnRate(key) == rates[0]){
                                vr0 += cost; 
                            }else if(returnRate(key) == rates[1]){
                                vr1 += cost; 
                            }else if(returnRate(key) == rates[2]){
                                vr2 += cost; 
                            }else if(returnRate(key) == rates[3]){
                                vr3 += cost; 
                            }
  
                            
                            if(costComp.isSelected()){
                                try{
                                    c2 = new PdfPCell(new Phrase(Integer.toString((int)comparison.get(key)), font3));
                                    c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                                    pdfTable2.addCell(c2); 
                                }catch(NullPointerException npe){
                                    c2 = new PdfPCell(new Phrase(" ", font3));
                                    c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                                    pdfTable2.addCell(c2);
                                }
                            }
                            
                            subSF += sf;
                            subSR += sr;
                            subRet += running;
                            subLV += iLessV;
                            subCost += cost;
                            try{
                                subComp += (int)comparison.get(key); 
                            }catch(NullPointerException npe){
                                subComp += 0; 
                            }
                        }
                      }
                    
                        
                    }
                if(subRet > 0){
                    c1 = new PdfPCell(new Phrase("Group " + group + " Subtotal:", font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_LEFT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subSF), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subSR), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subRet), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);
                    c1 = new PdfPCell(new Phrase(Integer.toString(subLV), font2));
                    c1.setColspan(1);
                    c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                    pdfTable2.addCell(c1);

                    
                    if(costComp.isSelected()){
                        c1 = new PdfPCell(new Phrase(Integer.toString(subComp), font2));
                        c1.setColspan(1);
                        c1.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
                        pdfTable2.addCell(c1);
                    }
                    
                   
                    c1 = new PdfPCell(new Phrase("    " , font2));
                    c1.setColspan(5);
                    if(costComp.isSelected())
                        c1.setColspan(6);
                    c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
                    pdfTable2.addCell(c1);
                    
                }
                runSF += subSF;
                runSR += subSR;
                runRet += subRet;
                runLV += subLV;
                runCost += subCost; 
                runComp += subComp; 
            }
            c1 = new PdfPCell(new Phrase("Total" , font2));
            c1.setColspan(6);
            if(costComp.isSelected())
                c1.setColspan(7);
            c1.setBorder(com.itextpdf.text.Rectangle.NO_BORDER);
            pdfTable2.addCell(c1);
            
            PdfPCell c2 = new PdfPCell(new Phrase("   ", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);


            c2 = new PdfPCell(new Phrase("S/F", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("S/R", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("Total(R)", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);

            c2 = new PdfPCell(new Phrase("Less VAT", font2));
            c2.setHorizontalAlignment(Element.ALIGN_CENTER);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);


            
            if(costComp.isSelected()){
                c2 = new PdfPCell(new Phrase("Previous", font2));
                c2.setHorizontalAlignment(Element.ALIGN_CENTER);
                c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable2.addCell(c2);
            }
            
            
            c2 = new PdfPCell(new Phrase("Total", font2));
            c2.setHorizontalAlignment(Element.ALIGN_LEFT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
            
            c2 = new PdfPCell(new Phrase(Integer.toString(runSF), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);
             c2 = new PdfPCell(new Phrase(Integer.toString(runSR), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);     
             c2 = new PdfPCell(new Phrase(Integer.toString(runRet), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2); 
             c2 = new PdfPCell(new Phrase(Integer.toString(runLV), font2));
            c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
            c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable2.addCell(c2);             

            total = runRet; 

            
            if(costComp.isSelected()){
                c2 = new PdfPCell(new Phrase(Integer.toString(runComp), font2));
                c2.setHorizontalAlignment(Element.ALIGN_RIGHT);
                c2.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable2.addCell(c2); 
            }
            
            
            PdfPTable pdfTable3 = new PdfPTable(2);
            pdfTable3.setWidthPercentage(30);
            pdfTable3.setSpacingBefore(20f);
            pdfTable3.setSpacingAfter(20f);   
            pdfTable3.setHorizontalAlignment(Element.ALIGN_RIGHT);

            PdfPCell c3 = new PdfPCell(new Phrase("VAT Rate", font2));
            c3.setHorizontalAlignment(Element.ALIGN_CENTER);
            c3.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable3.addCell(c3);
            
            c3 = new PdfPCell(new Phrase("Total", font2));
            c3.setHorizontalAlignment(Element.ALIGN_CENTER);
            c3.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable3.addCell(c3);
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[3]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3); 
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr3), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);     
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[0]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr0), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  

            c3 = new PdfPCell(new Phrase(Float.toString(rates[1]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);                  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr1), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);   
            
            c3 = new PdfPCell(new Phrase(Float.toString(rates[2]), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3);  
            
            c3 = new PdfPCell(new Phrase(Integer.toString(vr2), font3));
            c3.setHorizontalAlignment(Element.ALIGN_RIGHT);
            pdfTable3.addCell(c3); 

   
            document.add(headTable);
            document.add(image); 
            document.add(pdfTable);
            
            document.newPage();
            footer.pageNumber = 1; 
            footer.header = "Retail to Cost Summary";
            document.add(headTable2);
            document.add(image); 
            document.add(pdfTable2);
            document.add(pdfTable3);
            document.close();
            addToCompInfo();

 
        }catch(Exception e){
            e.printStackTrace();
        } 
    }
}
public void createProPdf(){
        Document document = new Document(PageSize.A4, 65, 65, 111,72);
        //namesToHash(); 
        newFileName = new StringBuilder("Productivity\\")
                .append(storeId + dateToString2(stDate.getDate())+".pdf").toString();



        try{
            PdfWriter writer = PdfWriter.getInstance(document,
                    new FileOutputStream(newFileName));

            document.open();
            com.itextpdf.text.Font font1 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 14, Font.BOLD);
            com.itextpdf.text.Font font2 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.BOLD);
            com.itextpdf.text.Font font3 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.PLAIN);

            Paragraph heading = new Paragraph("Productivity Report", font1); 
            heading.setAlignment(Element.ALIGN_CENTER);
            Paragraph storeInfo = new Paragraph(storeId + " " + storeLocationInfo);
            Paragraph repDate = new Paragraph("Report Date: " + dateToString(new Date()));
            Paragraph stoDate = new Paragraph("Stocktake Date: " + dateToString(stDate.getDate()));

                Paragraph heading3 = new Paragraph("Productivity Report", font1); 
                heading3.setAlignment(Element.ALIGN_CENTER);

                PdfPTable pdfTable4 = new PdfPTable(5);
                pdfTable4.setWidthPercentage(70);
                pdfTable4.setSpacingBefore(20f);
                pdfTable4.setSpacingAfter(20f);   
            float[] columnWidths = {2f, 1f, 1f, 1f, 1f};
            pdfTable4.setWidths(columnWidths);
                pdfTable4.setHorizontalAlignment(Element.ALIGN_CENTER);

                PdfPCell c4 = new PdfPCell(new Phrase("Clerk", font2));
                c4.setHorizontalAlignment(Element.ALIGN_CENTER);
                c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable4.addCell(c4);

                c4 = new PdfPCell(new Phrase("Total(R)", font2));
                c4.setHorizontalAlignment(Element.ALIGN_CENTER);
                c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable4.addCell(c4);

                c4 = new PdfPCell(new Phrase("Total(%)", font2));
                c4.setHorizontalAlignment(Element.ALIGN_CENTER);
                c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable4.addCell(c4);

                c4 = new PdfPCell(new Phrase("Adj(%)", font2));
                c4.setHorizontalAlignment(Element.ALIGN_CENTER);
                c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable4.addCell(c4);
                
                c4 = new PdfPCell(new Phrase("CPH", font2));
                c4.setHorizontalAlignment(Element.ALIGN_CENTER);
                c4.setBackgroundColor(BaseColor.LIGHT_GRAY);
                pdfTable4.addCell(c4);
                
                Enumeration<Integer> enumKey = clerkInfo.keys();
                while(enumKey.hasMoreElements()) {
                    int key = enumKey.nextElement();
                    int[] val = (int[])clerkInfo.get(key);
                  
                    Hashtable<Integer, String> clerkList = getClerks(); 
                    
                    if (clerkList.containsKey(key)){
                        c4 = new PdfPCell(new Phrase(clerkList.get(key), font3));
                        c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        pdfTable4.addCell(c4);
                    }
                    else{
                        c4 = new PdfPCell(new Phrase(Integer.toString(key), font3));
                        c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                        pdfTable4.addCell(c4);
                    }
                    
                    c4 = new PdfPCell(new Phrase(Integer.toString(val[0]+val[1]), font3));
                    c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable4.addCell(c4); 
                    
                    double percent = ((double)(val[0]+val[1])/total)*100;
                    c4 = new PdfPCell(new Phrase(Double.toString((int)Math.round(percent)), font3));
                    c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable4.addCell(c4); 
                    
                    double adj = ((double)val[1]/(val[0]+val[1]))*100;
                    c4 = new PdfPCell(new Phrase(Double.toString((int)Math.round(adj)), font3));
                    c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable4.addCell(c4); 
                    

                    
                    double cph = (((double)val[1]+(double)val[0])/(double)timeDiff)*60;
                    c4 = new PdfPCell(new Phrase(Double.toString((int)Math.round(cph)), font3));
                    c4.setHorizontalAlignment(Element.ALIGN_RIGHT);
                    pdfTable4.addCell(c4);
                }  
                document.add(heading3);
                document.add(storeInfo);
                document.add(repDate);
                document.add(stoDate);
                
                document.add(pdfTable4);
                document.close();
        }catch(Exception e){
            e.printStackTrace();
        } 


}

public void createListPdf(){
        Document document = new Document(PageSize.A4, 65, 65, 111,72);
        //namesToHash(); 
        newFileName = new StringBuilder("Exported Lists\\DL_")
                .append(storeId + ".pdf").toString();



        try{
            PdfWriter writer = PdfWriter.getInstance(document,
                    new FileOutputStream(newFileName));
     
            
     
        
        writer.setBoxSize("art", new com.itextpdf.text.Rectangle(36, 54, 559, 788));
       

            
            document.open();
            com.itextpdf.text.Font font1 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 14, Font.BOLD);
            com.itextpdf.text.Font font2 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.BOLD);
            com.itextpdf.text.Font font3 = new com.itextpdf.text.Font(com.itextpdf.text.Font.FontFamily.HELVETICA  , 10, Font.PLAIN);
            Image image = Image.getInstance("Misc\\ts_logo.png");
            image.scaleAbsoluteHeight(40);
            image.scaleAbsoluteWidth(183);
            image.setAbsolutePosition(30, 750f);
            
            Paragraph blank = new Paragraph("    ", font1); 
            Paragraph heading = new Paragraph("Department List", font1); 
            heading.setAlignment(Element.ALIGN_CENTER);
            Paragraph storeInfo = new Paragraph(storeId + " " + storeLocationInfo);
            
            PdfPTable pdfTable = new PdfPTable(5);
            pdfTable.setWidthPercentage(80);
            PdfPCell defaultCell = pdfTable.getDefaultCell();
            defaultCell.setBorder(PdfPCell.NO_BORDER);
            pdfTable.setSpacingBefore(20f);
            pdfTable.setSpacingAfter(20f);   
            float[] columnWidths = {1f, 3f, 1f, 1f, 1f};
            pdfTable.setWidths(columnWidths);
           
            PdfPCell c1 = new PdfPCell(new Phrase("Code", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Dept. Name", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
          
            c1 = new PdfPCell(new Phrase("VAT Rate", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Margin", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            c1 = new PdfPCell(new Phrase("Art. Grp.", font2));
            c1.setHorizontalAlignment(Element.ALIGN_LEFT);
            c1.setBackgroundColor(BaseColor.LIGHT_GRAY);
            pdfTable.addCell(c1);
            
            java.util.List<Double> tmp = Collections.list(liveListHash.keys());
            Collections.sort(tmp);
            Iterator<Double> it = tmp.iterator();

    while(it.hasNext()){

                Double key = it.next();
                DepartmentDetail val = (DepartmentDetail)liveListHash.get(key);

                c1 = new PdfPCell(new Phrase(
                        Double.toString(key), font3));
                pdfTable.addCell(c1);
                
                
                c1 = new PdfPCell(new Phrase(
                        val.getName(), font3));
                pdfTable.addCell(c1);
                
                c1 = new PdfPCell(new Phrase(
                        Double.toString(val.getVat()), font3));
                pdfTable.addCell(c1);
                
                c1 = new PdfPCell(new Phrase(
                        Double.toString(val.getMargin()), font3));
                pdfTable.addCell(c1);
                
                c1 = new PdfPCell(new Phrase(
                        val.getArticle(), font3));
                pdfTable.addCell(c1);
                


                    
            }
        document.add(image);
        document.add(heading);

        document.add(storeInfo);

        document.add(pdfTable);
        document.close();
        }catch(Exception e){
            e.printStackTrace();
        }     
            
        }
public void addToCompInfo(){
    Date dateFromDateChooser = stDate.getDate();
    String dateString = String.format("%1$td-%1$tm-%1$tY", dateFromDateChooser);
    File file = new File("Misc\\costs\\" +storeId + "-" + dateString + ".txt");
    try{
        BufferedWriter bw = new BufferedWriter(new FileWriter(file));
        Enumeration<Double> enumKey = comparisonInfo.keys(); 
        while(enumKey.hasMoreElements()){
            double key = enumKey.nextElement();
            int value = (int) comparisonInfo.get(key);
            bw.write(Double.toString(key));
            bw.write(",");
            bw.write(Integer.toString(value));
            bw.newLine();
            
        }
        bw.close();
        
    }catch(IOException ioe){
        System.err.println("");
    }
}
public void readInCompInfo(){
    File file = new File("Misc\\costs\\" + comparitor + ".txt");
    try{
        BufferedReader bw = new BufferedReader(new FileReader(file));
        String line = null; 
        while((line = bw.readLine()) != null){
            String[] entry = line.trim().split(",");
            try{
                comparison.put(Double.parseDouble(entry[0]), Integer.parseInt(entry[1]));
            }catch(NumberFormatException nfe){
                System.err.println("okdok");
            }
        }
            
        
    }catch(IOException ioe){
        System.err.println("");
    }
}
public static long getDateDiff(Date date1, Date date2, TimeUnit timeUnit) {
    long diffInMillies = date2.getTime() - date1.getTime();
    return timeUnit.convert(diffInMillies,TimeUnit.MILLISECONDS);
}
public Hashtable<Integer, String> getClerks(){
    File file = new File("Misc\\clerks.txt");

    Hashtable<Integer, String> hashs = new Hashtable<Integer, String>(); 
    try{
        BufferedReader br = new BufferedReader(new FileReader(file)); 
        String line = null; 
        while((line = br.readLine())!= null){
            String[] entry = line.trim().split(",");
            System.out.println(entry[0]); 
            try{
                hashs.put(Integer.parseInt(entry[0]), entry[1]);
            } catch (NumberFormatException nfe){
                System.out.print("ttt");
            }
 
        }
    br.close();
    }catch(IOException e){
        System.out.print(e);
    }
    return hashs; 

}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainPage.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainPage().setVisible(true);
            }
        });
        
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFrame ChangeRates;
    private javax.swing.JFrame CheckTag;
    private javax.swing.JFrame ControlPanel;
    private javax.swing.JFileChooser FileChooser;
    private javax.swing.JFrame FullInput;
    private javax.swing.JFrame Input;
    private javax.swing.JFrame ViewTags;
    private javax.swing.JTextField addDept;
    private javax.swing.JTextField addGroup;
    private javax.swing.JTextField addMargin;
    private javax.swing.JTextField addNo;
    private javax.swing.JButton addOk;
    private javax.swing.JTextField addVat;
    private javax.swing.JTextField adjIn;
    private javax.swing.JTextField adjVIn;
    private javax.swing.JLabel checkArticle;
    private javax.swing.JLabel checkDept;
    private javax.swing.JLabel checkMargin;
    private javax.swing.JTextField checkTNo;
    private javax.swing.JLabel checkValue;
    private javax.swing.JLabel checkVat;
    private javax.swing.JTextField clerkIn;
    private javax.swing.JLabel clerkLabel;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JCheckBox costComp;
    private javax.swing.JLabel d;
    private javax.swing.JFormattedTextField date;
    private javax.swing.JLabel dateOfTags;
    private javax.swing.JButton delete;
    private javax.swing.JLabel deptDisp;
    private javax.swing.JTextField deptIn;
    private javax.swing.JButton edit;
    private javax.swing.JPanel editingPanel;
    private javax.swing.JButton existingListButton;
    private javax.swing.JComboBox existingListCombo;
    private javax.swing.JButton export;
    private javax.swing.JLabel fileLabel;
    private javax.swing.JTextField first;
    private javax.swing.JTextField fixDept;
    private javax.swing.JTextField fixLocation;
    private javax.swing.JLabel fixNo;
    private javax.swing.JCheckBox fixSR;
    private javax.swing.JButton fixSave;
    private javax.swing.JTextField fixValue;
    private javax.swing.JButton fromTemplate;
    private javax.swing.JComboBox fromTemplateCombo;
    private javax.swing.JLabel idLabel;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel37;
    private javax.swing.JLabel jLabel37d;
    private javax.swing.JLabel jLabel38;
    private javax.swing.JLabel jLabel39;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel40;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTextField last;
    private javax.swing.JLabel locLabel;
    private javax.swing.JLabel location;
    private javax.swing.JTextField locationIn;
    private javax.swing.JButton newDept;
    private javax.swing.JLabel newListLabel;
    private javax.swing.JTextField newListName;
    private javax.swing.JButton openFile;
    private javax.swing.JTextField p2Area;
    private javax.swing.JTextField p2Dept;
    private javax.swing.JTextField p2Location;
    private javax.swing.JTextField p2TagNo;
    private javax.swing.JTextField p2Total;
    private javax.swing.JButton proRep;
    private javax.swing.JCheckBox productivity;
    private javax.swing.JTextField rate1;
    private javax.swing.JTextField rate2;
    private javax.swing.JTextField rate3;
    private javax.swing.JButton saveFile;
    private javax.swing.JButton saveList;
    private javax.swing.JTextArea seqWatch;
    private javax.swing.JPanel setupPanel;
    private javax.swing.JLabel showPrev;
    private javax.swing.JPanel showPrevTag;
    private javax.swing.JCheckBox srCheckBox;
    private com.toedter.calendar.JDateChooser stDate;
    private javax.swing.JButton startButton;
    private javax.swing.JTextField storeLocation;
    private javax.swing.JTable table;
    private javax.swing.JFrame tagFix;
    private javax.swing.JTextField tagNo;
    private javax.swing.JTable tagsTable;
    private javax.swing.JTextField valueIn;
    private javax.swing.JTextField vfirst;
    private javax.swing.JTextField vlast;
    // End of variables declaration//GEN-END:variables
    private DecimalFormat formatter = new DecimalFormat("0.00");
    private JTextField tf = new JTextField();
    private boolean isNew = false;
    private int selected = 0; 
    private String storeLocationInfo; 
    private String storeId; 
    private int fullSeq, srSeq; 
    private String[][] pass1Array;    
    private String[][] pass2Array;
    private Hashtable liveListHash = new Hashtable(); 
    private int indexI= 0; 
    private SortedSet<Integer> s = new TreeSet<Integer>(); 
    private Set<String> names = new HashSet<String>(); 
    private Hashtable namesValues = new Hashtable(); 
    private String fileDisplayName; 
    private String newFileName; 
    Sequence sequence = new Sequence(); 
    private int clerk; 
    private String tagLocation; 
    private float department; 
    private int value; 
    private int tagAdjustment; 
    private Hashtable clerkInfo = new Hashtable(); 
    float vr1 = 0; 
    float vr2 = 0; 
    float vr3 = 0; 
    float[] rates = new float[4]; 
    private Hashtable comparisonInfo = new Hashtable();
    private Hashtable comparison = new Hashtable();
    private String comparitor; 
    private int firstT;
    private int lastT; 
    private long timeDiff; 
    int thisTagNo; 
    int total; 
    PdfWriter writer; 

} 
